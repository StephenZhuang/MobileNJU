// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndChat.pb.h"

@implementation ZsndChatRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndChatRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MChatList ()
@property (retain) NSMutableArray* mutableChatList;
@property int32_t unreadCnt;
@end

@implementation MChatList

@synthesize mutableChatList;
- (BOOL) hasUnreadCnt {
  return !!hasUnreadCnt_;
}
- (void) setHasUnreadCnt:(BOOL) value {
  hasUnreadCnt_ = !!value;
}
@synthesize unreadCnt;
- (void) dealloc {
  self.mutableChatList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.unreadCnt = 0;
  }
  return self;
}
static MChatList* defaultMChatListInstance = nil;
+ (void) initialize {
  if (self == [MChatList class]) {
    defaultMChatListInstance = [[MChatList alloc] init];
  }
}
+ (MChatList*) defaultInstance {
  return defaultMChatListInstance;
}
- (MChatList*) defaultInstance {
  return defaultMChatListInstance;
}
- (NSArray*) chatList {
  return mutableChatList;
}
- (MChatIndex*) chatAtIndex:(int32_t) index {
  id value = [mutableChatList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MChatIndex* element in self.chatList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasUnreadCnt) {
    [output writeInt32:2 value:self.unreadCnt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MChatIndex* element in self.chatList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasUnreadCnt) {
    size += computeInt32Size(2, self.unreadCnt);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MChatList*) parseFromData:(NSData*) data {
  return (MChatList*)[[[MChatList builder] mergeFromData:data] build];
}
+ (MChatList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChatList*)[[[MChatList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MChatList*) parseFromInputStream:(NSInputStream*) input {
  return (MChatList*)[[[MChatList builder] mergeFromInputStream:input] build];
}
+ (MChatList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChatList*)[[[MChatList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChatList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MChatList*)[[[MChatList builder] mergeFromCodedInputStream:input] build];
}
+ (MChatList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChatList*)[[[MChatList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChatList_Builder*) builder {
  return [[[MChatList_Builder alloc] init] autorelease];
}
+ (MChatList_Builder*) builderWithPrototype:(MChatList*) prototype {
  return [[MChatList builder] mergeFrom:prototype];
}
- (MChatList_Builder*) builder {
  return [MChatList builder];
}
@end

@interface MChatList_Builder()
@property (retain) MChatList* result;
@end

@implementation MChatList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MChatList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MChatList_Builder*) clear {
  self.result = [[[MChatList alloc] init] autorelease];
  return self;
}
- (MChatList_Builder*) clone {
  return [MChatList builderWithPrototype:result];
}
- (MChatList*) defaultInstance {
  return [MChatList defaultInstance];
}
- (MChatList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MChatList*) buildPartial {
  MChatList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MChatList_Builder*) mergeFrom:(MChatList*) other {
  if (other == [MChatList defaultInstance]) {
    return self;
  }
  if (other.mutableChatList.count > 0) {
    if (result.mutableChatList == nil) {
      result.mutableChatList = [NSMutableArray array];
    }
    [result.mutableChatList addObjectsFromArray:other.mutableChatList];
  }
  if (other.hasUnreadCnt) {
    [self setUnreadCnt:other.unreadCnt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MChatList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MChatList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MChatIndex_Builder* subBuilder = [MChatIndex builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChat:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setUnreadCnt:[input readInt32]];
        break;
      }
    }
  }
}
- (NSArray*) chatList {
  if (result.mutableChatList == nil) { return [NSArray array]; }
  return result.mutableChatList;
}
- (MChatIndex*) chatAtIndex:(int32_t) index {
  return [result chatAtIndex:index];
}
- (MChatList_Builder*) replaceChatAtIndex:(int32_t) index with:(MChatIndex*) value {
  [result.mutableChatList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MChatList_Builder*) addAllChat:(NSArray*) values {
  if (result.mutableChatList == nil) {
    result.mutableChatList = [NSMutableArray array];
  }
  [result.mutableChatList addObjectsFromArray:values];
  return self;
}
- (MChatList_Builder*) clearChatList {
  result.mutableChatList = nil;
  return self;
}
- (MChatList_Builder*) addChat:(MChatIndex*) value {
  if (result.mutableChatList == nil) {
    result.mutableChatList = [NSMutableArray array];
  }
  [result.mutableChatList addObject:value];
  return self;
}
- (BOOL) hasUnreadCnt {
  return result.hasUnreadCnt;
}
- (int32_t) unreadCnt {
  return result.unreadCnt;
}
- (MChatList_Builder*) setUnreadCnt:(int32_t) value {
  result.hasUnreadCnt = YES;
  result.unreadCnt = value;
  return self;
}
- (MChatList_Builder*) clearUnreadCnt {
  result.hasUnreadCnt = NO;
  result.unreadCnt = 0;
  return self;
}
@end

@interface MChatIndex ()
@property (retain) NSString* id;
@property (retain) NSString* targetid;
@property int32_t targetHeadImg;
@property (retain) NSString* userid;
@property int32_t headImg;
@property int32_t hasNew;
@property (retain) NSString* msg;
@property (retain) NSString* time;
@property (retain) NSString* topicid;
@property (retain) NSString* topicImg;
@property (retain) NSString* topicContent;
@end

@implementation MChatIndex

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTargetid {
  return !!hasTargetid_;
}
- (void) setHasTargetid:(BOOL) value {
  hasTargetid_ = !!value;
}
@synthesize targetid;
- (BOOL) hasTargetHeadImg {
  return !!hasTargetHeadImg_;
}
- (void) setHasTargetHeadImg:(BOOL) value {
  hasTargetHeadImg_ = !!value;
}
@synthesize targetHeadImg;
- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) value {
  hasUserid_ = !!value;
}
@synthesize userid;
- (BOOL) hasHeadImg {
  return !!hasHeadImg_;
}
- (void) setHasHeadImg:(BOOL) value {
  hasHeadImg_ = !!value;
}
@synthesize headImg;
- (BOOL) hasHasNew {
  return !!hasHasNew_;
}
- (void) setHasHasNew:(BOOL) value {
  hasHasNew_ = !!value;
}
@synthesize hasNew;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) value {
  hasMsg_ = !!value;
}
@synthesize msg;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasTopicid {
  return !!hasTopicid_;
}
- (void) setHasTopicid:(BOOL) value {
  hasTopicid_ = !!value;
}
@synthesize topicid;
- (BOOL) hasTopicImg {
  return !!hasTopicImg_;
}
- (void) setHasTopicImg:(BOOL) value {
  hasTopicImg_ = !!value;
}
@synthesize topicImg;
- (BOOL) hasTopicContent {
  return !!hasTopicContent_;
}
- (void) setHasTopicContent:(BOOL) value {
  hasTopicContent_ = !!value;
}
@synthesize topicContent;
- (void) dealloc {
  self.id = nil;
  self.targetid = nil;
  self.userid = nil;
  self.msg = nil;
  self.time = nil;
  self.topicid = nil;
  self.topicImg = nil;
  self.topicContent = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.targetid = @"";
    self.targetHeadImg = 0;
    self.userid = @"";
    self.headImg = 0;
    self.hasNew = 0;
    self.msg = @"";
    self.time = @"";
    self.topicid = @"";
    self.topicImg = @"";
    self.topicContent = @"";
  }
  return self;
}
static MChatIndex* defaultMChatIndexInstance = nil;
+ (void) initialize {
  if (self == [MChatIndex class]) {
    defaultMChatIndexInstance = [[MChatIndex alloc] init];
  }
}
+ (MChatIndex*) defaultInstance {
  return defaultMChatIndexInstance;
}
- (MChatIndex*) defaultInstance {
  return defaultMChatIndexInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTargetid) {
    [output writeString:2 value:self.targetid];
  }
  if (self.hasTargetHeadImg) {
    [output writeInt32:3 value:self.targetHeadImg];
  }
  if (self.hasUserid) {
    [output writeString:4 value:self.userid];
  }
  if (self.hasHeadImg) {
    [output writeInt32:5 value:self.headImg];
  }
  if (self.hasHasNew) {
    [output writeInt32:6 value:self.hasNew];
  }
  if (self.hasMsg) {
    [output writeString:7 value:self.msg];
  }
  if (self.hasTime) {
    [output writeString:8 value:self.time];
  }
  if (self.hasTopicid) {
    [output writeString:9 value:self.topicid];
  }
  if (self.hasTopicImg) {
    [output writeString:10 value:self.topicImg];
  }
  if (self.hasTopicContent) {
    [output writeString:11 value:self.topicContent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTargetid) {
    size += computeStringSize(2, self.targetid);
  }
  if (self.hasTargetHeadImg) {
    size += computeInt32Size(3, self.targetHeadImg);
  }
  if (self.hasUserid) {
    size += computeStringSize(4, self.userid);
  }
  if (self.hasHeadImg) {
    size += computeInt32Size(5, self.headImg);
  }
  if (self.hasHasNew) {
    size += computeInt32Size(6, self.hasNew);
  }
  if (self.hasMsg) {
    size += computeStringSize(7, self.msg);
  }
  if (self.hasTime) {
    size += computeStringSize(8, self.time);
  }
  if (self.hasTopicid) {
    size += computeStringSize(9, self.topicid);
  }
  if (self.hasTopicImg) {
    size += computeStringSize(10, self.topicImg);
  }
  if (self.hasTopicContent) {
    size += computeStringSize(11, self.topicContent);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MChatIndex*) parseFromData:(NSData*) data {
  return (MChatIndex*)[[[MChatIndex builder] mergeFromData:data] build];
}
+ (MChatIndex*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChatIndex*)[[[MChatIndex builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MChatIndex*) parseFromInputStream:(NSInputStream*) input {
  return (MChatIndex*)[[[MChatIndex builder] mergeFromInputStream:input] build];
}
+ (MChatIndex*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChatIndex*)[[[MChatIndex builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChatIndex*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MChatIndex*)[[[MChatIndex builder] mergeFromCodedInputStream:input] build];
}
+ (MChatIndex*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChatIndex*)[[[MChatIndex builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChatIndex_Builder*) builder {
  return [[[MChatIndex_Builder alloc] init] autorelease];
}
+ (MChatIndex_Builder*) builderWithPrototype:(MChatIndex*) prototype {
  return [[MChatIndex builder] mergeFrom:prototype];
}
- (MChatIndex_Builder*) builder {
  return [MChatIndex builder];
}
@end

@interface MChatIndex_Builder()
@property (retain) MChatIndex* result;
@end

@implementation MChatIndex_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MChatIndex alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MChatIndex_Builder*) clear {
  self.result = [[[MChatIndex alloc] init] autorelease];
  return self;
}
- (MChatIndex_Builder*) clone {
  return [MChatIndex builderWithPrototype:result];
}
- (MChatIndex*) defaultInstance {
  return [MChatIndex defaultInstance];
}
- (MChatIndex*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MChatIndex*) buildPartial {
  MChatIndex* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MChatIndex_Builder*) mergeFrom:(MChatIndex*) other {
  if (other == [MChatIndex defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTargetid) {
    [self setTargetid:other.targetid];
  }
  if (other.hasTargetHeadImg) {
    [self setTargetHeadImg:other.targetHeadImg];
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasHeadImg) {
    [self setHeadImg:other.headImg];
  }
  if (other.hasHasNew) {
    [self setHasNew:other.hasNew];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasTopicid) {
    [self setTopicid:other.topicid];
  }
  if (other.hasTopicImg) {
    [self setTopicImg:other.topicImg];
  }
  if (other.hasTopicContent) {
    [self setTopicContent:other.topicContent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MChatIndex_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MChatIndex_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTargetid:[input readString]];
        break;
      }
      case 24: {
        [self setTargetHeadImg:[input readInt32]];
        break;
      }
      case 34: {
        [self setUserid:[input readString]];
        break;
      }
      case 40: {
        [self setHeadImg:[input readInt32]];
        break;
      }
      case 48: {
        [self setHasNew:[input readInt32]];
        break;
      }
      case 58: {
        [self setMsg:[input readString]];
        break;
      }
      case 66: {
        [self setTime:[input readString]];
        break;
      }
      case 74: {
        [self setTopicid:[input readString]];
        break;
      }
      case 82: {
        [self setTopicImg:[input readString]];
        break;
      }
      case 90: {
        [self setTopicContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MChatIndex_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MChatIndex_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTargetid {
  return result.hasTargetid;
}
- (NSString*) targetid {
  return result.targetid;
}
- (MChatIndex_Builder*) setTargetid:(NSString*) value {
  result.hasTargetid = YES;
  result.targetid = value;
  return self;
}
- (MChatIndex_Builder*) clearTargetid {
  result.hasTargetid = NO;
  result.targetid = @"";
  return self;
}
- (BOOL) hasTargetHeadImg {
  return result.hasTargetHeadImg;
}
- (int32_t) targetHeadImg {
  return result.targetHeadImg;
}
- (MChatIndex_Builder*) setTargetHeadImg:(int32_t) value {
  result.hasTargetHeadImg = YES;
  result.targetHeadImg = value;
  return self;
}
- (MChatIndex_Builder*) clearTargetHeadImg {
  result.hasTargetHeadImg = NO;
  result.targetHeadImg = 0;
  return self;
}
- (BOOL) hasUserid {
  return result.hasUserid;
}
- (NSString*) userid {
  return result.userid;
}
- (MChatIndex_Builder*) setUserid:(NSString*) value {
  result.hasUserid = YES;
  result.userid = value;
  return self;
}
- (MChatIndex_Builder*) clearUserid {
  result.hasUserid = NO;
  result.userid = @"";
  return self;
}
- (BOOL) hasHeadImg {
  return result.hasHeadImg;
}
- (int32_t) headImg {
  return result.headImg;
}
- (MChatIndex_Builder*) setHeadImg:(int32_t) value {
  result.hasHeadImg = YES;
  result.headImg = value;
  return self;
}
- (MChatIndex_Builder*) clearHeadImg {
  result.hasHeadImg = NO;
  result.headImg = 0;
  return self;
}
- (BOOL) hasHasNew {
  return result.hasHasNew;
}
- (int32_t) hasNew {
  return result.hasNew;
}
- (MChatIndex_Builder*) setHasNew:(int32_t) value {
  result.hasHasNew = YES;
  result.hasNew = value;
  return self;
}
- (MChatIndex_Builder*) clearHasNew {
  result.hasHasNew = NO;
  result.hasNew = 0;
  return self;
}
- (BOOL) hasMsg {
  return result.hasMsg;
}
- (NSString*) msg {
  return result.msg;
}
- (MChatIndex_Builder*) setMsg:(NSString*) value {
  result.hasMsg = YES;
  result.msg = value;
  return self;
}
- (MChatIndex_Builder*) clearMsg {
  result.hasMsg = NO;
  result.msg = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MChatIndex_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MChatIndex_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasTopicid {
  return result.hasTopicid;
}
- (NSString*) topicid {
  return result.topicid;
}
- (MChatIndex_Builder*) setTopicid:(NSString*) value {
  result.hasTopicid = YES;
  result.topicid = value;
  return self;
}
- (MChatIndex_Builder*) clearTopicid {
  result.hasTopicid = NO;
  result.topicid = @"";
  return self;
}
- (BOOL) hasTopicImg {
  return result.hasTopicImg;
}
- (NSString*) topicImg {
  return result.topicImg;
}
- (MChatIndex_Builder*) setTopicImg:(NSString*) value {
  result.hasTopicImg = YES;
  result.topicImg = value;
  return self;
}
- (MChatIndex_Builder*) clearTopicImg {
  result.hasTopicImg = NO;
  result.topicImg = @"";
  return self;
}
- (BOOL) hasTopicContent {
  return result.hasTopicContent;
}
- (NSString*) topicContent {
  return result.topicContent;
}
- (MChatIndex_Builder*) setTopicContent:(NSString*) value {
  result.hasTopicContent = YES;
  result.topicContent = value;
  return self;
}
- (MChatIndex_Builder*) clearTopicContent {
  result.hasTopicContent = NO;
  result.topicContent = @"";
  return self;
}
@end

@interface MChats ()
@property (retain) NSMutableArray* mutableChatList;
@property (retain) NSString* targetid;
@property int32_t headImg;
@property (retain) NSString* pushId;
@end

@implementation MChats

@synthesize mutableChatList;
- (BOOL) hasTargetid {
  return !!hasTargetid_;
}
- (void) setHasTargetid:(BOOL) value {
  hasTargetid_ = !!value;
}
@synthesize targetid;
- (BOOL) hasHeadImg {
  return !!hasHeadImg_;
}
- (void) setHasHeadImg:(BOOL) value {
  hasHeadImg_ = !!value;
}
@synthesize headImg;
- (BOOL) hasPushId {
  return !!hasPushId_;
}
- (void) setHasPushId:(BOOL) value {
  hasPushId_ = !!value;
}
@synthesize pushId;
- (void) dealloc {
  self.mutableChatList = nil;
  self.targetid = nil;
  self.pushId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.targetid = @"";
    self.headImg = 0;
    self.pushId = @"";
  }
  return self;
}
static MChats* defaultMChatsInstance = nil;
+ (void) initialize {
  if (self == [MChats class]) {
    defaultMChatsInstance = [[MChats alloc] init];
  }
}
+ (MChats*) defaultInstance {
  return defaultMChatsInstance;
}
- (MChats*) defaultInstance {
  return defaultMChatsInstance;
}
- (NSArray*) chatList {
  return mutableChatList;
}
- (MChat*) chatAtIndex:(int32_t) index {
  id value = [mutableChatList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MChat* element in self.chatList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasTargetid) {
    [output writeString:2 value:self.targetid];
  }
  if (self.hasHeadImg) {
    [output writeInt32:3 value:self.headImg];
  }
  if (self.hasPushId) {
    [output writeString:4 value:self.pushId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MChat* element in self.chatList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasTargetid) {
    size += computeStringSize(2, self.targetid);
  }
  if (self.hasHeadImg) {
    size += computeInt32Size(3, self.headImg);
  }
  if (self.hasPushId) {
    size += computeStringSize(4, self.pushId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MChats*) parseFromData:(NSData*) data {
  return (MChats*)[[[MChats builder] mergeFromData:data] build];
}
+ (MChats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChats*)[[[MChats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MChats*) parseFromInputStream:(NSInputStream*) input {
  return (MChats*)[[[MChats builder] mergeFromInputStream:input] build];
}
+ (MChats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChats*)[[[MChats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MChats*)[[[MChats builder] mergeFromCodedInputStream:input] build];
}
+ (MChats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChats*)[[[MChats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChats_Builder*) builder {
  return [[[MChats_Builder alloc] init] autorelease];
}
+ (MChats_Builder*) builderWithPrototype:(MChats*) prototype {
  return [[MChats builder] mergeFrom:prototype];
}
- (MChats_Builder*) builder {
  return [MChats builder];
}
@end

@interface MChats_Builder()
@property (retain) MChats* result;
@end

@implementation MChats_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MChats alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MChats_Builder*) clear {
  self.result = [[[MChats alloc] init] autorelease];
  return self;
}
- (MChats_Builder*) clone {
  return [MChats builderWithPrototype:result];
}
- (MChats*) defaultInstance {
  return [MChats defaultInstance];
}
- (MChats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MChats*) buildPartial {
  MChats* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MChats_Builder*) mergeFrom:(MChats*) other {
  if (other == [MChats defaultInstance]) {
    return self;
  }
  if (other.mutableChatList.count > 0) {
    if (result.mutableChatList == nil) {
      result.mutableChatList = [NSMutableArray array];
    }
    [result.mutableChatList addObjectsFromArray:other.mutableChatList];
  }
  if (other.hasTargetid) {
    [self setTargetid:other.targetid];
  }
  if (other.hasHeadImg) {
    [self setHeadImg:other.headImg];
  }
  if (other.hasPushId) {
    [self setPushId:other.pushId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MChats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MChats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MChat_Builder* subBuilder = [MChat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChat:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setTargetid:[input readString]];
        break;
      }
      case 24: {
        [self setHeadImg:[input readInt32]];
        break;
      }
      case 34: {
        [self setPushId:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) chatList {
  if (result.mutableChatList == nil) { return [NSArray array]; }
  return result.mutableChatList;
}
- (MChat*) chatAtIndex:(int32_t) index {
  return [result chatAtIndex:index];
}
- (MChats_Builder*) replaceChatAtIndex:(int32_t) index with:(MChat*) value {
  [result.mutableChatList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MChats_Builder*) addAllChat:(NSArray*) values {
  if (result.mutableChatList == nil) {
    result.mutableChatList = [NSMutableArray array];
  }
  [result.mutableChatList addObjectsFromArray:values];
  return self;
}
- (MChats_Builder*) clearChatList {
  result.mutableChatList = nil;
  return self;
}
- (MChats_Builder*) addChat:(MChat*) value {
  if (result.mutableChatList == nil) {
    result.mutableChatList = [NSMutableArray array];
  }
  [result.mutableChatList addObject:value];
  return self;
}
- (BOOL) hasTargetid {
  return result.hasTargetid;
}
- (NSString*) targetid {
  return result.targetid;
}
- (MChats_Builder*) setTargetid:(NSString*) value {
  result.hasTargetid = YES;
  result.targetid = value;
  return self;
}
- (MChats_Builder*) clearTargetid {
  result.hasTargetid = NO;
  result.targetid = @"";
  return self;
}
- (BOOL) hasHeadImg {
  return result.hasHeadImg;
}
- (int32_t) headImg {
  return result.headImg;
}
- (MChats_Builder*) setHeadImg:(int32_t) value {
  result.hasHeadImg = YES;
  result.headImg = value;
  return self;
}
- (MChats_Builder*) clearHeadImg {
  result.hasHeadImg = NO;
  result.headImg = 0;
  return self;
}
- (BOOL) hasPushId {
  return result.hasPushId;
}
- (NSString*) pushId {
  return result.pushId;
}
- (MChats_Builder*) setPushId:(NSString*) value {
  result.hasPushId = YES;
  result.pushId = value;
  return self;
}
- (MChats_Builder*) clearPushId {
  result.hasPushId = NO;
  result.pushId = @"";
  return self;
}
@end

@interface MChat ()
@property (retain) NSString* id;
@property (retain) NSString* userid;
@property (retain) NSString* content;
@property (retain) NSString* img;
@property (retain) NSString* time;
@property (retain) NSString* createtime;
@property (retain) NSString* size;
@end

@implementation MChat

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) value {
  hasUserid_ = !!value;
}
@synthesize userid;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasCreatetime {
  return !!hasCreatetime_;
}
- (void) setHasCreatetime:(BOOL) value {
  hasCreatetime_ = !!value;
}
@synthesize createtime;
- (BOOL) hasSize {
  return !!hasSize_;
}
- (void) setHasSize:(BOOL) value {
  hasSize_ = !!value;
}
@synthesize size;
- (void) dealloc {
  self.id = nil;
  self.userid = nil;
  self.content = nil;
  self.img = nil;
  self.time = nil;
  self.createtime = nil;
  self.size = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.userid = @"";
    self.content = @"";
    self.img = @"";
    self.time = @"";
    self.createtime = @"";
    self.size = @"";
  }
  return self;
}
static MChat* defaultMChatInstance = nil;
+ (void) initialize {
  if (self == [MChat class]) {
    defaultMChatInstance = [[MChat alloc] init];
  }
}
+ (MChat*) defaultInstance {
  return defaultMChatInstance;
}
- (MChat*) defaultInstance {
  return defaultMChatInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasUserid) {
    [output writeString:2 value:self.userid];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  if (self.hasImg) {
    [output writeString:4 value:self.img];
  }
  if (self.hasTime) {
    [output writeString:5 value:self.time];
  }
  if (self.hasCreatetime) {
    [output writeString:6 value:self.createtime];
  }
  if (self.hasSize) {
    [output writeString:7 value:self.size];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasUserid) {
    size += computeStringSize(2, self.userid);
  }
  if (self.hasContent) {
    size += computeStringSize(3, self.content);
  }
  if (self.hasImg) {
    size += computeStringSize(4, self.img);
  }
  if (self.hasTime) {
    size += computeStringSize(5, self.time);
  }
  if (self.hasCreatetime) {
    size += computeStringSize(6, self.createtime);
  }
  if (self.hasSize) {
    size += computeStringSize(7, self.size);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MChat*) parseFromData:(NSData*) data {
  return (MChat*)[[[MChat builder] mergeFromData:data] build];
}
+ (MChat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChat*)[[[MChat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MChat*) parseFromInputStream:(NSInputStream*) input {
  return (MChat*)[[[MChat builder] mergeFromInputStream:input] build];
}
+ (MChat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChat*)[[[MChat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MChat*)[[[MChat builder] mergeFromCodedInputStream:input] build];
}
+ (MChat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MChat*)[[[MChat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MChat_Builder*) builder {
  return [[[MChat_Builder alloc] init] autorelease];
}
+ (MChat_Builder*) builderWithPrototype:(MChat*) prototype {
  return [[MChat builder] mergeFrom:prototype];
}
- (MChat_Builder*) builder {
  return [MChat builder];
}
@end

@interface MChat_Builder()
@property (retain) MChat* result;
@end

@implementation MChat_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MChat alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MChat_Builder*) clear {
  self.result = [[[MChat alloc] init] autorelease];
  return self;
}
- (MChat_Builder*) clone {
  return [MChat builderWithPrototype:result];
}
- (MChat*) defaultInstance {
  return [MChat defaultInstance];
}
- (MChat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MChat*) buildPartial {
  MChat* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MChat_Builder*) mergeFrom:(MChat*) other {
  if (other == [MChat defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasCreatetime) {
    [self setCreatetime:other.createtime];
  }
  if (other.hasSize) {
    [self setSize:other.size];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MChat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MChat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setUserid:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
      case 34: {
        [self setImg:[input readString]];
        break;
      }
      case 42: {
        [self setTime:[input readString]];
        break;
      }
      case 50: {
        [self setCreatetime:[input readString]];
        break;
      }
      case 58: {
        [self setSize:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MChat_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MChat_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasUserid {
  return result.hasUserid;
}
- (NSString*) userid {
  return result.userid;
}
- (MChat_Builder*) setUserid:(NSString*) value {
  result.hasUserid = YES;
  result.userid = value;
  return self;
}
- (MChat_Builder*) clearUserid {
  result.hasUserid = NO;
  result.userid = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MChat_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MChat_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSString*) img {
  return result.img;
}
- (MChat_Builder*) setImg:(NSString*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MChat_Builder*) clearImg {
  result.hasImg = NO;
  result.img = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MChat_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MChat_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasCreatetime {
  return result.hasCreatetime;
}
- (NSString*) createtime {
  return result.createtime;
}
- (MChat_Builder*) setCreatetime:(NSString*) value {
  result.hasCreatetime = YES;
  result.createtime = value;
  return self;
}
- (MChat_Builder*) clearCreatetime {
  result.hasCreatetime = NO;
  result.createtime = @"";
  return self;
}
- (BOOL) hasSize {
  return result.hasSize;
}
- (NSString*) size {
  return result.size;
}
- (MChat_Builder*) setSize:(NSString*) value {
  result.hasSize = YES;
  result.size = value;
  return self;
}
- (MChat_Builder*) clearSize {
  result.hasSize = NO;
  result.size = @"";
  return self;
}
@end

@interface MView ()
@property (retain) NSString* userid;
@property int32_t headImg;
@property (retain) NSString* targetid;
@property int32_t targetHeadImg;
@property (retain) NSString* topicid;
@end

@implementation MView

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) value {
  hasUserid_ = !!value;
}
@synthesize userid;
- (BOOL) hasHeadImg {
  return !!hasHeadImg_;
}
- (void) setHasHeadImg:(BOOL) value {
  hasHeadImg_ = !!value;
}
@synthesize headImg;
- (BOOL) hasTargetid {
  return !!hasTargetid_;
}
- (void) setHasTargetid:(BOOL) value {
  hasTargetid_ = !!value;
}
@synthesize targetid;
- (BOOL) hasTargetHeadImg {
  return !!hasTargetHeadImg_;
}
- (void) setHasTargetHeadImg:(BOOL) value {
  hasTargetHeadImg_ = !!value;
}
@synthesize targetHeadImg;
- (BOOL) hasTopicid {
  return !!hasTopicid_;
}
- (void) setHasTopicid:(BOOL) value {
  hasTopicid_ = !!value;
}
@synthesize topicid;
- (void) dealloc {
  self.userid = nil;
  self.targetid = nil;
  self.topicid = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.headImg = 0;
    self.targetid = @"";
    self.targetHeadImg = 0;
    self.topicid = @"";
  }
  return self;
}
static MView* defaultMViewInstance = nil;
+ (void) initialize {
  if (self == [MView class]) {
    defaultMViewInstance = [[MView alloc] init];
  }
}
+ (MView*) defaultInstance {
  return defaultMViewInstance;
}
- (MView*) defaultInstance {
  return defaultMViewInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasHeadImg) {
    [output writeInt32:2 value:self.headImg];
  }
  if (self.hasTargetid) {
    [output writeString:3 value:self.targetid];
  }
  if (self.hasTargetHeadImg) {
    [output writeInt32:4 value:self.targetHeadImg];
  }
  if (self.hasTopicid) {
    [output writeString:5 value:self.topicid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserid) {
    size += computeStringSize(1, self.userid);
  }
  if (self.hasHeadImg) {
    size += computeInt32Size(2, self.headImg);
  }
  if (self.hasTargetid) {
    size += computeStringSize(3, self.targetid);
  }
  if (self.hasTargetHeadImg) {
    size += computeInt32Size(4, self.targetHeadImg);
  }
  if (self.hasTopicid) {
    size += computeStringSize(5, self.topicid);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MView*) parseFromData:(NSData*) data {
  return (MView*)[[[MView builder] mergeFromData:data] build];
}
+ (MView*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MView*)[[[MView builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MView*) parseFromInputStream:(NSInputStream*) input {
  return (MView*)[[[MView builder] mergeFromInputStream:input] build];
}
+ (MView*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MView*)[[[MView builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MView*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MView*)[[[MView builder] mergeFromCodedInputStream:input] build];
}
+ (MView*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MView*)[[[MView builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MView_Builder*) builder {
  return [[[MView_Builder alloc] init] autorelease];
}
+ (MView_Builder*) builderWithPrototype:(MView*) prototype {
  return [[MView builder] mergeFrom:prototype];
}
- (MView_Builder*) builder {
  return [MView builder];
}
@end

@interface MView_Builder()
@property (retain) MView* result;
@end

@implementation MView_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MView alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MView_Builder*) clear {
  self.result = [[[MView alloc] init] autorelease];
  return self;
}
- (MView_Builder*) clone {
  return [MView builderWithPrototype:result];
}
- (MView*) defaultInstance {
  return [MView defaultInstance];
}
- (MView*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MView*) buildPartial {
  MView* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MView_Builder*) mergeFrom:(MView*) other {
  if (other == [MView defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasHeadImg) {
    [self setHeadImg:other.headImg];
  }
  if (other.hasTargetid) {
    [self setTargetid:other.targetid];
  }
  if (other.hasTargetHeadImg) {
    [self setTargetHeadImg:other.targetHeadImg];
  }
  if (other.hasTopicid) {
    [self setTopicid:other.topicid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MView_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MView_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        [self setHeadImg:[input readInt32]];
        break;
      }
      case 26: {
        [self setTargetid:[input readString]];
        break;
      }
      case 32: {
        [self setTargetHeadImg:[input readInt32]];
        break;
      }
      case 42: {
        [self setTopicid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return result.hasUserid;
}
- (NSString*) userid {
  return result.userid;
}
- (MView_Builder*) setUserid:(NSString*) value {
  result.hasUserid = YES;
  result.userid = value;
  return self;
}
- (MView_Builder*) clearUserid {
  result.hasUserid = NO;
  result.userid = @"";
  return self;
}
- (BOOL) hasHeadImg {
  return result.hasHeadImg;
}
- (int32_t) headImg {
  return result.headImg;
}
- (MView_Builder*) setHeadImg:(int32_t) value {
  result.hasHeadImg = YES;
  result.headImg = value;
  return self;
}
- (MView_Builder*) clearHeadImg {
  result.hasHeadImg = NO;
  result.headImg = 0;
  return self;
}
- (BOOL) hasTargetid {
  return result.hasTargetid;
}
- (NSString*) targetid {
  return result.targetid;
}
- (MView_Builder*) setTargetid:(NSString*) value {
  result.hasTargetid = YES;
  result.targetid = value;
  return self;
}
- (MView_Builder*) clearTargetid {
  result.hasTargetid = NO;
  result.targetid = @"";
  return self;
}
- (BOOL) hasTargetHeadImg {
  return result.hasTargetHeadImg;
}
- (int32_t) targetHeadImg {
  return result.targetHeadImg;
}
- (MView_Builder*) setTargetHeadImg:(int32_t) value {
  result.hasTargetHeadImg = YES;
  result.targetHeadImg = value;
  return self;
}
- (MView_Builder*) clearTargetHeadImg {
  result.hasTargetHeadImg = NO;
  result.targetHeadImg = 0;
  return self;
}
- (BOOL) hasTopicid {
  return result.hasTopicid;
}
- (NSString*) topicid {
  return result.topicid;
}
- (MView_Builder*) setTopicid:(NSString*) value {
  result.hasTopicid = YES;
  result.topicid = value;
  return self;
}
- (MView_Builder*) clearTopicid {
  result.hasTopicid = NO;
  result.topicid = @"";
  return self;
}
@end

