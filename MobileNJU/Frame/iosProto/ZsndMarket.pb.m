// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndMarket.pb.h"

@implementation ZsndMarketRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndMarketRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MMarketType ()
@property (retain) NSString* id;
@end

@implementation MMarketType

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (void) dealloc {
  self.id = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
  }
  return self;
}
static MMarketType* defaultMMarketTypeInstance = nil;
+ (void) initialize {
  if (self == [MMarketType class]) {
    defaultMMarketTypeInstance = [[MMarketType alloc] init];
  }
}
+ (MMarketType*) defaultInstance {
  return defaultMMarketTypeInstance;
}
- (MMarketType*) defaultInstance {
  return defaultMMarketTypeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MMarketType*) parseFromData:(NSData*) data {
  return (MMarketType*)[[[MMarketType builder] mergeFromData:data] build];
}
+ (MMarketType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketType*)[[[MMarketType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MMarketType*) parseFromInputStream:(NSInputStream*) input {
  return (MMarketType*)[[[MMarketType builder] mergeFromInputStream:input] build];
}
+ (MMarketType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketType*)[[[MMarketType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMarketType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MMarketType*)[[[MMarketType builder] mergeFromCodedInputStream:input] build];
}
+ (MMarketType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketType*)[[[MMarketType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMarketType_Builder*) builder {
  return [[[MMarketType_Builder alloc] init] autorelease];
}
+ (MMarketType_Builder*) builderWithPrototype:(MMarketType*) prototype {
  return [[MMarketType builder] mergeFrom:prototype];
}
- (MMarketType_Builder*) builder {
  return [MMarketType builder];
}
@end

@interface MMarketType_Builder()
@property (retain) MMarketType* result;
@end

@implementation MMarketType_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MMarketType alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MMarketType_Builder*) clear {
  self.result = [[[MMarketType alloc] init] autorelease];
  return self;
}
- (MMarketType_Builder*) clone {
  return [MMarketType builderWithPrototype:result];
}
- (MMarketType*) defaultInstance {
  return [MMarketType defaultInstance];
}
- (MMarketType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MMarketType*) buildPartial {
  MMarketType* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MMarketType_Builder*) mergeFrom:(MMarketType*) other {
  if (other == [MMarketType defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MMarketType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MMarketType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MMarketType_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MMarketType_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
@end

@interface MMarketTypeList ()
@property (retain) NSMutableArray* mutableMarketList;
@end

@implementation MMarketTypeList

@synthesize mutableMarketList;
- (void) dealloc {
  self.mutableMarketList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MMarketTypeList* defaultMMarketTypeListInstance = nil;
+ (void) initialize {
  if (self == [MMarketTypeList class]) {
    defaultMMarketTypeListInstance = [[MMarketTypeList alloc] init];
  }
}
+ (MMarketTypeList*) defaultInstance {
  return defaultMMarketTypeListInstance;
}
- (MMarketTypeList*) defaultInstance {
  return defaultMMarketTypeListInstance;
}
- (NSArray*) marketList {
  return mutableMarketList;
}
- (MMarketType*) marketAtIndex:(int32_t) index {
  id value = [mutableMarketList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MMarketType* element in self.marketList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MMarketType* element in self.marketList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MMarketTypeList*) parseFromData:(NSData*) data {
  return (MMarketTypeList*)[[[MMarketTypeList builder] mergeFromData:data] build];
}
+ (MMarketTypeList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketTypeList*)[[[MMarketTypeList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MMarketTypeList*) parseFromInputStream:(NSInputStream*) input {
  return (MMarketTypeList*)[[[MMarketTypeList builder] mergeFromInputStream:input] build];
}
+ (MMarketTypeList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketTypeList*)[[[MMarketTypeList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMarketTypeList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MMarketTypeList*)[[[MMarketTypeList builder] mergeFromCodedInputStream:input] build];
}
+ (MMarketTypeList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketTypeList*)[[[MMarketTypeList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMarketTypeList_Builder*) builder {
  return [[[MMarketTypeList_Builder alloc] init] autorelease];
}
+ (MMarketTypeList_Builder*) builderWithPrototype:(MMarketTypeList*) prototype {
  return [[MMarketTypeList builder] mergeFrom:prototype];
}
- (MMarketTypeList_Builder*) builder {
  return [MMarketTypeList builder];
}
@end

@interface MMarketTypeList_Builder()
@property (retain) MMarketTypeList* result;
@end

@implementation MMarketTypeList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MMarketTypeList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MMarketTypeList_Builder*) clear {
  self.result = [[[MMarketTypeList alloc] init] autorelease];
  return self;
}
- (MMarketTypeList_Builder*) clone {
  return [MMarketTypeList builderWithPrototype:result];
}
- (MMarketTypeList*) defaultInstance {
  return [MMarketTypeList defaultInstance];
}
- (MMarketTypeList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MMarketTypeList*) buildPartial {
  MMarketTypeList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MMarketTypeList_Builder*) mergeFrom:(MMarketTypeList*) other {
  if (other == [MMarketTypeList defaultInstance]) {
    return self;
  }
  if (other.mutableMarketList.count > 0) {
    if (result.mutableMarketList == nil) {
      result.mutableMarketList = [NSMutableArray array];
    }
    [result.mutableMarketList addObjectsFromArray:other.mutableMarketList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MMarketTypeList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MMarketTypeList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MMarketType_Builder* subBuilder = [MMarketType builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMarket:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) marketList {
  if (result.mutableMarketList == nil) { return [NSArray array]; }
  return result.mutableMarketList;
}
- (MMarketType*) marketAtIndex:(int32_t) index {
  return [result marketAtIndex:index];
}
- (MMarketTypeList_Builder*) replaceMarketAtIndex:(int32_t) index with:(MMarketType*) value {
  [result.mutableMarketList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MMarketTypeList_Builder*) addAllMarket:(NSArray*) values {
  if (result.mutableMarketList == nil) {
    result.mutableMarketList = [NSMutableArray array];
  }
  [result.mutableMarketList addObjectsFromArray:values];
  return self;
}
- (MMarketTypeList_Builder*) clearMarketList {
  result.mutableMarketList = nil;
  return self;
}
- (MMarketTypeList_Builder*) addMarket:(MMarketType*) value {
  if (result.mutableMarketList == nil) {
    result.mutableMarketList = [NSMutableArray array];
  }
  [result.mutableMarketList addObject:value];
  return self;
}
@end

@interface MProduct ()
@property (retain) NSString* id;
@end

@implementation MProduct

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (void) dealloc {
  self.id = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
  }
  return self;
}
static MProduct* defaultMProductInstance = nil;
+ (void) initialize {
  if (self == [MProduct class]) {
    defaultMProductInstance = [[MProduct alloc] init];
  }
}
+ (MProduct*) defaultInstance {
  return defaultMProductInstance;
}
- (MProduct*) defaultInstance {
  return defaultMProductInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MProduct*) parseFromData:(NSData*) data {
  return (MProduct*)[[[MProduct builder] mergeFromData:data] build];
}
+ (MProduct*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MProduct*)[[[MProduct builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MProduct*) parseFromInputStream:(NSInputStream*) input {
  return (MProduct*)[[[MProduct builder] mergeFromInputStream:input] build];
}
+ (MProduct*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MProduct*)[[[MProduct builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MProduct*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MProduct*)[[[MProduct builder] mergeFromCodedInputStream:input] build];
}
+ (MProduct*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MProduct*)[[[MProduct builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MProduct_Builder*) builder {
  return [[[MProduct_Builder alloc] init] autorelease];
}
+ (MProduct_Builder*) builderWithPrototype:(MProduct*) prototype {
  return [[MProduct builder] mergeFrom:prototype];
}
- (MProduct_Builder*) builder {
  return [MProduct builder];
}
@end

@interface MProduct_Builder()
@property (retain) MProduct* result;
@end

@implementation MProduct_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MProduct alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MProduct_Builder*) clear {
  self.result = [[[MProduct alloc] init] autorelease];
  return self;
}
- (MProduct_Builder*) clone {
  return [MProduct builderWithPrototype:result];
}
- (MProduct*) defaultInstance {
  return [MProduct defaultInstance];
}
- (MProduct*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MProduct*) buildPartial {
  MProduct* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MProduct_Builder*) mergeFrom:(MProduct*) other {
  if (other == [MProduct defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MProduct_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MProduct_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MProduct_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MProduct_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
@end

@interface MMarketList ()
@property (retain) NSMutableArray* mutableMarketList;
@end

@implementation MMarketList

@synthesize mutableMarketList;
- (void) dealloc {
  self.mutableMarketList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MMarketList* defaultMMarketListInstance = nil;
+ (void) initialize {
  if (self == [MMarketList class]) {
    defaultMMarketListInstance = [[MMarketList alloc] init];
  }
}
+ (MMarketList*) defaultInstance {
  return defaultMMarketListInstance;
}
- (MMarketList*) defaultInstance {
  return defaultMMarketListInstance;
}
- (NSArray*) marketList {
  return mutableMarketList;
}
- (MProduct*) marketAtIndex:(int32_t) index {
  id value = [mutableMarketList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MProduct* element in self.marketList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MProduct* element in self.marketList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MMarketList*) parseFromData:(NSData*) data {
  return (MMarketList*)[[[MMarketList builder] mergeFromData:data] build];
}
+ (MMarketList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketList*)[[[MMarketList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MMarketList*) parseFromInputStream:(NSInputStream*) input {
  return (MMarketList*)[[[MMarketList builder] mergeFromInputStream:input] build];
}
+ (MMarketList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketList*)[[[MMarketList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMarketList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MMarketList*)[[[MMarketList builder] mergeFromCodedInputStream:input] build];
}
+ (MMarketList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMarketList*)[[[MMarketList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMarketList_Builder*) builder {
  return [[[MMarketList_Builder alloc] init] autorelease];
}
+ (MMarketList_Builder*) builderWithPrototype:(MMarketList*) prototype {
  return [[MMarketList builder] mergeFrom:prototype];
}
- (MMarketList_Builder*) builder {
  return [MMarketList builder];
}
@end

@interface MMarketList_Builder()
@property (retain) MMarketList* result;
@end

@implementation MMarketList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MMarketList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MMarketList_Builder*) clear {
  self.result = [[[MMarketList alloc] init] autorelease];
  return self;
}
- (MMarketList_Builder*) clone {
  return [MMarketList builderWithPrototype:result];
}
- (MMarketList*) defaultInstance {
  return [MMarketList defaultInstance];
}
- (MMarketList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MMarketList*) buildPartial {
  MMarketList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MMarketList_Builder*) mergeFrom:(MMarketList*) other {
  if (other == [MMarketList defaultInstance]) {
    return self;
  }
  if (other.mutableMarketList.count > 0) {
    if (result.mutableMarketList == nil) {
      result.mutableMarketList = [NSMutableArray array];
    }
    [result.mutableMarketList addObjectsFromArray:other.mutableMarketList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MMarketList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MMarketList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MProduct_Builder* subBuilder = [MProduct builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMarket:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) marketList {
  if (result.mutableMarketList == nil) { return [NSArray array]; }
  return result.mutableMarketList;
}
- (MProduct*) marketAtIndex:(int32_t) index {
  return [result marketAtIndex:index];
}
- (MMarketList_Builder*) replaceMarketAtIndex:(int32_t) index with:(MProduct*) value {
  [result.mutableMarketList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MMarketList_Builder*) addAllMarket:(NSArray*) values {
  if (result.mutableMarketList == nil) {
    result.mutableMarketList = [NSMutableArray array];
  }
  [result.mutableMarketList addObjectsFromArray:values];
  return self;
}
- (MMarketList_Builder*) clearMarketList {
  result.mutableMarketList = nil;
  return self;
}
- (MMarketList_Builder*) addMarket:(MProduct*) value {
  if (result.mutableMarketList == nil) {
    result.mutableMarketList = [NSMutableArray array];
  }
  [result.mutableMarketList addObject:value];
  return self;
}
@end

@interface MAddMarket ()
@property (retain) NSString* name;
@end

@implementation MAddMarket

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static MAddMarket* defaultMAddMarketInstance = nil;
+ (void) initialize {
  if (self == [MAddMarket class]) {
    defaultMAddMarketInstance = [[MAddMarket alloc] init];
  }
}
+ (MAddMarket*) defaultInstance {
  return defaultMAddMarketInstance;
}
- (MAddMarket*) defaultInstance {
  return defaultMAddMarketInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MAddMarket*) parseFromData:(NSData*) data {
  return (MAddMarket*)[[[MAddMarket builder] mergeFromData:data] build];
}
+ (MAddMarket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddMarket*)[[[MAddMarket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MAddMarket*) parseFromInputStream:(NSInputStream*) input {
  return (MAddMarket*)[[[MAddMarket builder] mergeFromInputStream:input] build];
}
+ (MAddMarket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddMarket*)[[[MAddMarket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MAddMarket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MAddMarket*)[[[MAddMarket builder] mergeFromCodedInputStream:input] build];
}
+ (MAddMarket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddMarket*)[[[MAddMarket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MAddMarket_Builder*) builder {
  return [[[MAddMarket_Builder alloc] init] autorelease];
}
+ (MAddMarket_Builder*) builderWithPrototype:(MAddMarket*) prototype {
  return [[MAddMarket builder] mergeFrom:prototype];
}
- (MAddMarket_Builder*) builder {
  return [MAddMarket builder];
}
@end

@interface MAddMarket_Builder()
@property (retain) MAddMarket* result;
@end

@implementation MAddMarket_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MAddMarket alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MAddMarket_Builder*) clear {
  self.result = [[[MAddMarket alloc] init] autorelease];
  return self;
}
- (MAddMarket_Builder*) clone {
  return [MAddMarket builderWithPrototype:result];
}
- (MAddMarket*) defaultInstance {
  return [MAddMarket defaultInstance];
}
- (MAddMarket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MAddMarket*) buildPartial {
  MAddMarket* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MAddMarket_Builder*) mergeFrom:(MAddMarket*) other {
  if (other == [MAddMarket defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MAddMarket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MAddMarket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MAddMarket_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MAddMarket_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

