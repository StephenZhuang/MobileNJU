// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndSystem.pb.h"

@implementation ZsndSystemRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndSystemRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MRet ()
@property int32_t code;
@property (retain) NSString* msg;
@property (retain) NSData* img;
@end

@implementation MRet

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) value {
  hasMsg_ = !!value;
}
@synthesize msg;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.msg = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.code = 0;
    self.msg = @"";
    self.img = [NSData data];
  }
  return self;
}
static MRet* defaultMRetInstance = nil;
+ (void) initialize {
  if (self == [MRet class]) {
    defaultMRetInstance = [[MRet alloc] init];
  }
}
+ (MRet*) defaultInstance {
  return defaultMRetInstance;
}
- (MRet*) defaultInstance {
  return defaultMRetInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  if (self.hasImg) {
    [output writeData:3 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeInt32Size(1, self.code);
  }
  if (self.hasMsg) {
    size += computeStringSize(2, self.msg);
  }
  if (self.hasImg) {
    size += computeDataSize(3, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MRet*) parseFromData:(NSData*) data {
  return (MRet*)[[[MRet builder] mergeFromData:data] build];
}
+ (MRet*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRet*)[[[MRet builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MRet*) parseFromInputStream:(NSInputStream*) input {
  return (MRet*)[[[MRet builder] mergeFromInputStream:input] build];
}
+ (MRet*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRet*)[[[MRet builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRet*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MRet*)[[[MRet builder] mergeFromCodedInputStream:input] build];
}
+ (MRet*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRet*)[[[MRet builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRet_Builder*) builder {
  return [[[MRet_Builder alloc] init] autorelease];
}
+ (MRet_Builder*) builderWithPrototype:(MRet*) prototype {
  return [[MRet builder] mergeFrom:prototype];
}
- (MRet_Builder*) builder {
  return [MRet builder];
}
@end

@interface MRet_Builder()
@property (retain) MRet* result;
@end

@implementation MRet_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MRet alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MRet_Builder*) clear {
  self.result = [[[MRet alloc] init] autorelease];
  return self;
}
- (MRet_Builder*) clone {
  return [MRet builderWithPrototype:result];
}
- (MRet*) defaultInstance {
  return [MRet defaultInstance];
}
- (MRet*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MRet*) buildPartial {
  MRet* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MRet_Builder*) mergeFrom:(MRet*) other {
  if (other == [MRet defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MRet_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MRet_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
      case 26: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (int32_t) code {
  return result.code;
}
- (MRet_Builder*) setCode:(int32_t) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (MRet_Builder*) clearCode {
  result.hasCode = NO;
  result.code = 0;
  return self;
}
- (BOOL) hasMsg {
  return result.hasMsg;
}
- (NSString*) msg {
  return result.msg;
}
- (MRet_Builder*) setMsg:(NSString*) value {
  result.hasMsg = YES;
  result.msg = value;
  return self;
}
- (MRet_Builder*) clearMsg {
  result.hasMsg = NO;
  result.msg = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MRet_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MRet_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MImg ()
@property (retain) NSData* img;
@end

@implementation MImg

- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.img = [NSData data];
  }
  return self;
}
static MImg* defaultMImgInstance = nil;
+ (void) initialize {
  if (self == [MImg class]) {
    defaultMImgInstance = [[MImg alloc] init];
  }
}
+ (MImg*) defaultInstance {
  return defaultMImgInstance;
}
- (MImg*) defaultInstance {
  return defaultMImgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasImg) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasImg) {
    [output writeData:1 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasImg) {
    size += computeDataSize(1, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MImg*) parseFromData:(NSData*) data {
  return (MImg*)[[[MImg builder] mergeFromData:data] build];
}
+ (MImg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MImg*)[[[MImg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MImg*) parseFromInputStream:(NSInputStream*) input {
  return (MImg*)[[[MImg builder] mergeFromInputStream:input] build];
}
+ (MImg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MImg*)[[[MImg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MImg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MImg*)[[[MImg builder] mergeFromCodedInputStream:input] build];
}
+ (MImg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MImg*)[[[MImg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MImg_Builder*) builder {
  return [[[MImg_Builder alloc] init] autorelease];
}
+ (MImg_Builder*) builderWithPrototype:(MImg*) prototype {
  return [[MImg builder] mergeFrom:prototype];
}
- (MImg_Builder*) builder {
  return [MImg builder];
}
@end

@interface MImg_Builder()
@property (retain) MImg* result;
@end

@implementation MImg_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MImg alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MImg_Builder*) clear {
  self.result = [[[MImg alloc] init] autorelease];
  return self;
}
- (MImg_Builder*) clone {
  return [MImg builderWithPrototype:result];
}
- (MImg*) defaultInstance {
  return [MImg defaultInstance];
}
- (MImg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MImg*) buildPartial {
  MImg* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MImg_Builder*) mergeFrom:(MImg*) other {
  if (other == [MImg defaultInstance]) {
    return self;
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MImg_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MImg_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MImg_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MImg_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MRoomList ()
@property (retain) NSMutableArray* mutableRoomList;
@end

@implementation MRoomList

@synthesize mutableRoomList;
- (void) dealloc {
  self.mutableRoomList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MRoomList* defaultMRoomListInstance = nil;
+ (void) initialize {
  if (self == [MRoomList class]) {
    defaultMRoomListInstance = [[MRoomList alloc] init];
  }
}
+ (MRoomList*) defaultInstance {
  return defaultMRoomListInstance;
}
- (MRoomList*) defaultInstance {
  return defaultMRoomListInstance;
}
- (NSArray*) roomList {
  return mutableRoomList;
}
- (MRoom*) roomAtIndex:(int32_t) index {
  id value = [mutableRoomList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MRoom* element in self.roomList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MRoom* element in self.roomList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MRoomList*) parseFromData:(NSData*) data {
  return (MRoomList*)[[[MRoomList builder] mergeFromData:data] build];
}
+ (MRoomList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRoomList*)[[[MRoomList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MRoomList*) parseFromInputStream:(NSInputStream*) input {
  return (MRoomList*)[[[MRoomList builder] mergeFromInputStream:input] build];
}
+ (MRoomList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRoomList*)[[[MRoomList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRoomList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MRoomList*)[[[MRoomList builder] mergeFromCodedInputStream:input] build];
}
+ (MRoomList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRoomList*)[[[MRoomList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRoomList_Builder*) builder {
  return [[[MRoomList_Builder alloc] init] autorelease];
}
+ (MRoomList_Builder*) builderWithPrototype:(MRoomList*) prototype {
  return [[MRoomList builder] mergeFrom:prototype];
}
- (MRoomList_Builder*) builder {
  return [MRoomList builder];
}
@end

@interface MRoomList_Builder()
@property (retain) MRoomList* result;
@end

@implementation MRoomList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MRoomList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MRoomList_Builder*) clear {
  self.result = [[[MRoomList alloc] init] autorelease];
  return self;
}
- (MRoomList_Builder*) clone {
  return [MRoomList builderWithPrototype:result];
}
- (MRoomList*) defaultInstance {
  return [MRoomList defaultInstance];
}
- (MRoomList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MRoomList*) buildPartial {
  MRoomList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MRoomList_Builder*) mergeFrom:(MRoomList*) other {
  if (other == [MRoomList defaultInstance]) {
    return self;
  }
  if (other.mutableRoomList.count > 0) {
    if (result.mutableRoomList == nil) {
      result.mutableRoomList = [NSMutableArray array];
    }
    [result.mutableRoomList addObjectsFromArray:other.mutableRoomList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MRoomList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MRoomList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MRoom_Builder* subBuilder = [MRoom builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoom:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) roomList {
  if (result.mutableRoomList == nil) { return [NSArray array]; }
  return result.mutableRoomList;
}
- (MRoom*) roomAtIndex:(int32_t) index {
  return [result roomAtIndex:index];
}
- (MRoomList_Builder*) replaceRoomAtIndex:(int32_t) index with:(MRoom*) value {
  [result.mutableRoomList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MRoomList_Builder*) addAllRoom:(NSArray*) values {
  if (result.mutableRoomList == nil) {
    result.mutableRoomList = [NSMutableArray array];
  }
  [result.mutableRoomList addObjectsFromArray:values];
  return self;
}
- (MRoomList_Builder*) clearRoomList {
  result.mutableRoomList = nil;
  return self;
}
- (MRoomList_Builder*) addRoom:(MRoom*) value {
  if (result.mutableRoomList == nil) {
    result.mutableRoomList = [NSMutableArray array];
  }
  [result.mutableRoomList addObject:value];
  return self;
}
@end

@interface MRoom ()
@property (retain) NSString* name;
@property (retain) NSMutableArray* mutableNumList;
@end

@implementation MRoom

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize mutableNumList;
- (void) dealloc {
  self.name = nil;
  self.mutableNumList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static MRoom* defaultMRoomInstance = nil;
+ (void) initialize {
  if (self == [MRoom class]) {
    defaultMRoomInstance = [[MRoom alloc] init];
  }
}
+ (MRoom*) defaultInstance {
  return defaultMRoomInstance;
}
- (MRoom*) defaultInstance {
  return defaultMRoomInstance;
}
- (NSArray*) numList {
  return mutableNumList;
}
- (NSString*) numAtIndex:(int32_t) index {
  id value = [mutableNumList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  for (NSString* element in self.mutableNumList) {
    [output writeString:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableNumList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableNumList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MRoom*) parseFromData:(NSData*) data {
  return (MRoom*)[[[MRoom builder] mergeFromData:data] build];
}
+ (MRoom*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRoom*)[[[MRoom builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MRoom*) parseFromInputStream:(NSInputStream*) input {
  return (MRoom*)[[[MRoom builder] mergeFromInputStream:input] build];
}
+ (MRoom*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRoom*)[[[MRoom builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MRoom*)[[[MRoom builder] mergeFromCodedInputStream:input] build];
}
+ (MRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRoom*)[[[MRoom builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRoom_Builder*) builder {
  return [[[MRoom_Builder alloc] init] autorelease];
}
+ (MRoom_Builder*) builderWithPrototype:(MRoom*) prototype {
  return [[MRoom builder] mergeFrom:prototype];
}
- (MRoom_Builder*) builder {
  return [MRoom builder];
}
@end

@interface MRoom_Builder()
@property (retain) MRoom* result;
@end

@implementation MRoom_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MRoom alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MRoom_Builder*) clear {
  self.result = [[[MRoom alloc] init] autorelease];
  return self;
}
- (MRoom_Builder*) clone {
  return [MRoom builderWithPrototype:result];
}
- (MRoom*) defaultInstance {
  return [MRoom defaultInstance];
}
- (MRoom*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MRoom*) buildPartial {
  MRoom* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MRoom_Builder*) mergeFrom:(MRoom*) other {
  if (other == [MRoom defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.mutableNumList.count > 0) {
    if (result.mutableNumList == nil) {
      result.mutableNumList = [NSMutableArray array];
    }
    [result.mutableNumList addObjectsFromArray:other.mutableNumList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MRoom_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MRoom_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self addNum:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MRoom_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MRoom_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (NSArray*) numList {
  if (result.mutableNumList == nil) {
    return [NSArray array];
  }
  return result.mutableNumList;
}
- (NSString*) numAtIndex:(int32_t) index {
  return [result numAtIndex:index];
}
- (MRoom_Builder*) replaceNumAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableNumList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MRoom_Builder*) addNum:(NSString*) value {
  if (result.mutableNumList == nil) {
    result.mutableNumList = [NSMutableArray array];
  }
  [result.mutableNumList addObject:value];
  return self;
}
- (MRoom_Builder*) addAllNum:(NSArray*) values {
  if (result.mutableNumList == nil) {
    result.mutableNumList = [NSMutableArray array];
  }
  [result.mutableNumList addObjectsFromArray:values];
  return self;
}
- (MRoom_Builder*) clearNumList {
  result.mutableNumList = nil;
  return self;
}
@end

@interface MClassList ()
@property int32_t week;
@property (retain) NSMutableArray* mutableClassList;
@property (retain) NSString* nowTime;
@property (retain) NSData* img;
@end

@implementation MClassList

- (BOOL) hasWeek {
  return !!hasWeek_;
}
- (void) setHasWeek:(BOOL) value {
  hasWeek_ = !!value;
}
@synthesize week;
@synthesize mutableClassList;
- (BOOL) hasNowTime {
  return !!hasNowTime_;
}
- (void) setHasNowTime:(BOOL) value {
  hasNowTime_ = !!value;
}
@synthesize nowTime;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.mutableClassList = nil;
  self.nowTime = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.week = 0;
    self.nowTime = @"";
    self.img = [NSData data];
  }
  return self;
}
static MClassList* defaultMClassListInstance = nil;
+ (void) initialize {
  if (self == [MClassList class]) {
    defaultMClassListInstance = [[MClassList alloc] init];
  }
}
+ (MClassList*) defaultInstance {
  return defaultMClassListInstance;
}
- (MClassList*) defaultInstance {
  return defaultMClassListInstance;
}
- (NSArray*) classList {
  return mutableClassList;
}
- (MClass*) classAtIndex:(int32_t) index {
  id value = [mutableClassList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWeek) {
    [output writeInt32:1 value:self.week];
  }
  for (MClass* element in self.classList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasImg) {
    [output writeData:3 value:self.img];
  }
  if (self.hasNowTime) {
    [output writeString:4 value:self.nowTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasWeek) {
    size += computeInt32Size(1, self.week);
  }
  for (MClass* element in self.classList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasImg) {
    size += computeDataSize(3, self.img);
  }
  if (self.hasNowTime) {
    size += computeStringSize(4, self.nowTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MClassList*) parseFromData:(NSData*) data {
  return (MClassList*)[[[MClassList builder] mergeFromData:data] build];
}
+ (MClassList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MClassList*)[[[MClassList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MClassList*) parseFromInputStream:(NSInputStream*) input {
  return (MClassList*)[[[MClassList builder] mergeFromInputStream:input] build];
}
+ (MClassList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MClassList*)[[[MClassList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MClassList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MClassList*)[[[MClassList builder] mergeFromCodedInputStream:input] build];
}
+ (MClassList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MClassList*)[[[MClassList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MClassList_Builder*) builder {
  return [[[MClassList_Builder alloc] init] autorelease];
}
+ (MClassList_Builder*) builderWithPrototype:(MClassList*) prototype {
  return [[MClassList builder] mergeFrom:prototype];
}
- (MClassList_Builder*) builder {
  return [MClassList builder];
}
@end

@interface MClassList_Builder()
@property (retain) MClassList* result;
@end

@implementation MClassList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MClassList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MClassList_Builder*) clear {
  self.result = [[[MClassList alloc] init] autorelease];
  return self;
}
- (MClassList_Builder*) clone {
  return [MClassList builderWithPrototype:result];
}
- (MClassList*) defaultInstance {
  return [MClassList defaultInstance];
}
- (MClassList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MClassList*) buildPartial {
  MClassList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MClassList_Builder*) mergeFrom:(MClassList*) other {
  if (other == [MClassList defaultInstance]) {
    return self;
  }
  if (other.hasWeek) {
    [self setWeek:other.week];
  }
  if (other.mutableClassList.count > 0) {
    if (result.mutableClassList == nil) {
      result.mutableClassList = [NSMutableArray array];
    }
    [result.mutableClassList addObjectsFromArray:other.mutableClassList];
  }
  if (other.hasNowTime) {
    [self setNowTime:other.nowTime];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MClassList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MClassList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWeek:[input readInt32]];
        break;
      }
      case 18: {
        MClass_Builder* subBuilder = [MClass builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClass:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setImg:[input readData]];
        break;
      }
      case 34: {
        [self setNowTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasWeek {
  return result.hasWeek;
}
- (int32_t) week {
  return result.week;
}
- (MClassList_Builder*) setWeek:(int32_t) value {
  result.hasWeek = YES;
  result.week = value;
  return self;
}
- (MClassList_Builder*) clearWeek {
  result.hasWeek = NO;
  result.week = 0;
  return self;
}
- (NSArray*) classList {
  if (result.mutableClassList == nil) { return [NSArray array]; }
  return result.mutableClassList;
}
- (MClass*) classAtIndex:(int32_t) index {
  return [result classAtIndex:index];
}
- (MClassList_Builder*) replaceClassAtIndex:(int32_t) index with:(MClass*) value {
  [result.mutableClassList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MClassList_Builder*) addAllClass:(NSArray*) values {
  if (result.mutableClassList == nil) {
    result.mutableClassList = [NSMutableArray array];
  }
  [result.mutableClassList addObjectsFromArray:values];
  return self;
}
- (MClassList_Builder*) clearClassList {
  result.mutableClassList = nil;
  return self;
}
- (MClassList_Builder*) addClass:(MClass*) value {
  if (result.mutableClassList == nil) {
    result.mutableClassList = [NSMutableArray array];
  }
  [result.mutableClassList addObject:value];
  return self;
}
- (BOOL) hasNowTime {
  return result.hasNowTime;
}
- (NSString*) nowTime {
  return result.nowTime;
}
- (MClassList_Builder*) setNowTime:(NSString*) value {
  result.hasNowTime = YES;
  result.nowTime = value;
  return self;
}
- (MClassList_Builder*) clearNowTime {
  result.hasNowTime = NO;
  result.nowTime = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MClassList_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MClassList_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MClass ()
@property (retain) NSString* name;
@property (retain) NSString* teacher;
@property (retain) NSString* address;
@property (retain) NSString* week;
@property int32_t day;
@property int32_t begin;
@property int32_t end;
@property (retain) NSString* time;
@end

@implementation MClass

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasTeacher {
  return !!hasTeacher_;
}
- (void) setHasTeacher:(BOOL) value {
  hasTeacher_ = !!value;
}
@synthesize teacher;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasWeek {
  return !!hasWeek_;
}
- (void) setHasWeek:(BOOL) value {
  hasWeek_ = !!value;
}
@synthesize week;
- (BOOL) hasDay {
  return !!hasDay_;
}
- (void) setHasDay:(BOOL) value {
  hasDay_ = !!value;
}
@synthesize day;
- (BOOL) hasBegin {
  return !!hasBegin_;
}
- (void) setHasBegin:(BOOL) value {
  hasBegin_ = !!value;
}
@synthesize begin;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) value {
  hasEnd_ = !!value;
}
@synthesize end;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (void) dealloc {
  self.name = nil;
  self.teacher = nil;
  self.address = nil;
  self.week = nil;
  self.time = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.teacher = @"";
    self.address = @"";
    self.week = @"";
    self.day = 0;
    self.begin = 0;
    self.end = 0;
    self.time = @"";
  }
  return self;
}
static MClass* defaultMClassInstance = nil;
+ (void) initialize {
  if (self == [MClass class]) {
    defaultMClassInstance = [[MClass alloc] init];
  }
}
+ (MClass*) defaultInstance {
  return defaultMClassInstance;
}
- (MClass*) defaultInstance {
  return defaultMClassInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasTeacher) {
    [output writeString:2 value:self.teacher];
  }
  if (self.hasAddress) {
    [output writeString:3 value:self.address];
  }
  if (self.hasWeek) {
    [output writeString:4 value:self.week];
  }
  if (self.hasDay) {
    [output writeInt32:5 value:self.day];
  }
  if (self.hasBegin) {
    [output writeInt32:6 value:self.begin];
  }
  if (self.hasEnd) {
    [output writeInt32:7 value:self.end];
  }
  if (self.hasTime) {
    [output writeString:8 value:self.time];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasTeacher) {
    size += computeStringSize(2, self.teacher);
  }
  if (self.hasAddress) {
    size += computeStringSize(3, self.address);
  }
  if (self.hasWeek) {
    size += computeStringSize(4, self.week);
  }
  if (self.hasDay) {
    size += computeInt32Size(5, self.day);
  }
  if (self.hasBegin) {
    size += computeInt32Size(6, self.begin);
  }
  if (self.hasEnd) {
    size += computeInt32Size(7, self.end);
  }
  if (self.hasTime) {
    size += computeStringSize(8, self.time);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MClass*) parseFromData:(NSData*) data {
  return (MClass*)[[[MClass builder] mergeFromData:data] build];
}
+ (MClass*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MClass*)[[[MClass builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MClass*) parseFromInputStream:(NSInputStream*) input {
  return (MClass*)[[[MClass builder] mergeFromInputStream:input] build];
}
+ (MClass*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MClass*)[[[MClass builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MClass*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MClass*)[[[MClass builder] mergeFromCodedInputStream:input] build];
}
+ (MClass*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MClass*)[[[MClass builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MClass_Builder*) builder {
  return [[[MClass_Builder alloc] init] autorelease];
}
+ (MClass_Builder*) builderWithPrototype:(MClass*) prototype {
  return [[MClass builder] mergeFrom:prototype];
}
- (MClass_Builder*) builder {
  return [MClass builder];
}
@end

@interface MClass_Builder()
@property (retain) MClass* result;
@end

@implementation MClass_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MClass alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MClass_Builder*) clear {
  self.result = [[[MClass alloc] init] autorelease];
  return self;
}
- (MClass_Builder*) clone {
  return [MClass builderWithPrototype:result];
}
- (MClass*) defaultInstance {
  return [MClass defaultInstance];
}
- (MClass*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MClass*) buildPartial {
  MClass* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MClass_Builder*) mergeFrom:(MClass*) other {
  if (other == [MClass defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTeacher) {
    [self setTeacher:other.teacher];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasWeek) {
    [self setWeek:other.week];
  }
  if (other.hasDay) {
    [self setDay:other.day];
  }
  if (other.hasBegin) {
    [self setBegin:other.begin];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MClass_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MClass_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setTeacher:[input readString]];
        break;
      }
      case 26: {
        [self setAddress:[input readString]];
        break;
      }
      case 34: {
        [self setWeek:[input readString]];
        break;
      }
      case 40: {
        [self setDay:[input readInt32]];
        break;
      }
      case 48: {
        [self setBegin:[input readInt32]];
        break;
      }
      case 56: {
        [self setEnd:[input readInt32]];
        break;
      }
      case 66: {
        [self setTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MClass_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MClass_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasTeacher {
  return result.hasTeacher;
}
- (NSString*) teacher {
  return result.teacher;
}
- (MClass_Builder*) setTeacher:(NSString*) value {
  result.hasTeacher = YES;
  result.teacher = value;
  return self;
}
- (MClass_Builder*) clearTeacher {
  result.hasTeacher = NO;
  result.teacher = @"";
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSString*) address {
  return result.address;
}
- (MClass_Builder*) setAddress:(NSString*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (MClass_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = @"";
  return self;
}
- (BOOL) hasWeek {
  return result.hasWeek;
}
- (NSString*) week {
  return result.week;
}
- (MClass_Builder*) setWeek:(NSString*) value {
  result.hasWeek = YES;
  result.week = value;
  return self;
}
- (MClass_Builder*) clearWeek {
  result.hasWeek = NO;
  result.week = @"";
  return self;
}
- (BOOL) hasDay {
  return result.hasDay;
}
- (int32_t) day {
  return result.day;
}
- (MClass_Builder*) setDay:(int32_t) value {
  result.hasDay = YES;
  result.day = value;
  return self;
}
- (MClass_Builder*) clearDay {
  result.hasDay = NO;
  result.day = 0;
  return self;
}
- (BOOL) hasBegin {
  return result.hasBegin;
}
- (int32_t) begin {
  return result.begin;
}
- (MClass_Builder*) setBegin:(int32_t) value {
  result.hasBegin = YES;
  result.begin = value;
  return self;
}
- (MClass_Builder*) clearBegin {
  result.hasBegin = NO;
  result.begin = 0;
  return self;
}
- (BOOL) hasEnd {
  return result.hasEnd;
}
- (int32_t) end {
  return result.end;
}
- (MClass_Builder*) setEnd:(int32_t) value {
  result.hasEnd = YES;
  result.end = value;
  return self;
}
- (MClass_Builder*) clearEnd {
  result.hasEnd = NO;
  result.end = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MClass_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MClass_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
@end

@interface MCourseList ()
@property (retain) NSMutableArray* mutableCourseList;
@property (retain) NSData* img;
@end

@implementation MCourseList

@synthesize mutableCourseList;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.mutableCourseList = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.img = [NSData data];
  }
  return self;
}
static MCourseList* defaultMCourseListInstance = nil;
+ (void) initialize {
  if (self == [MCourseList class]) {
    defaultMCourseListInstance = [[MCourseList alloc] init];
  }
}
+ (MCourseList*) defaultInstance {
  return defaultMCourseListInstance;
}
- (MCourseList*) defaultInstance {
  return defaultMCourseListInstance;
}
- (NSArray*) courseList {
  return mutableCourseList;
}
- (MCourse*) courseAtIndex:(int32_t) index {
  id value = [mutableCourseList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MCourse* element in self.courseList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasImg) {
    [output writeData:2 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MCourse* element in self.courseList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasImg) {
    size += computeDataSize(2, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCourseList*) parseFromData:(NSData*) data {
  return (MCourseList*)[[[MCourseList builder] mergeFromData:data] build];
}
+ (MCourseList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCourseList*)[[[MCourseList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCourseList*) parseFromInputStream:(NSInputStream*) input {
  return (MCourseList*)[[[MCourseList builder] mergeFromInputStream:input] build];
}
+ (MCourseList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCourseList*)[[[MCourseList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCourseList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCourseList*)[[[MCourseList builder] mergeFromCodedInputStream:input] build];
}
+ (MCourseList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCourseList*)[[[MCourseList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCourseList_Builder*) builder {
  return [[[MCourseList_Builder alloc] init] autorelease];
}
+ (MCourseList_Builder*) builderWithPrototype:(MCourseList*) prototype {
  return [[MCourseList builder] mergeFrom:prototype];
}
- (MCourseList_Builder*) builder {
  return [MCourseList builder];
}
@end

@interface MCourseList_Builder()
@property (retain) MCourseList* result;
@end

@implementation MCourseList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MCourseList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MCourseList_Builder*) clear {
  self.result = [[[MCourseList alloc] init] autorelease];
  return self;
}
- (MCourseList_Builder*) clone {
  return [MCourseList builderWithPrototype:result];
}
- (MCourseList*) defaultInstance {
  return [MCourseList defaultInstance];
}
- (MCourseList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCourseList*) buildPartial {
  MCourseList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MCourseList_Builder*) mergeFrom:(MCourseList*) other {
  if (other == [MCourseList defaultInstance]) {
    return self;
  }
  if (other.mutableCourseList.count > 0) {
    if (result.mutableCourseList == nil) {
      result.mutableCourseList = [NSMutableArray array];
    }
    [result.mutableCourseList addObjectsFromArray:other.mutableCourseList];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCourseList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCourseList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MCourse_Builder* subBuilder = [MCourse builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCourse:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) courseList {
  if (result.mutableCourseList == nil) { return [NSArray array]; }
  return result.mutableCourseList;
}
- (MCourse*) courseAtIndex:(int32_t) index {
  return [result courseAtIndex:index];
}
- (MCourseList_Builder*) replaceCourseAtIndex:(int32_t) index with:(MCourse*) value {
  [result.mutableCourseList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MCourseList_Builder*) addAllCourse:(NSArray*) values {
  if (result.mutableCourseList == nil) {
    result.mutableCourseList = [NSMutableArray array];
  }
  [result.mutableCourseList addObjectsFromArray:values];
  return self;
}
- (MCourseList_Builder*) clearCourseList {
  result.mutableCourseList = nil;
  return self;
}
- (MCourseList_Builder*) addCourse:(MCourse*) value {
  if (result.mutableCourseList == nil) {
    result.mutableCourseList = [NSMutableArray array];
  }
  [result.mutableCourseList addObject:value];
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MCourseList_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MCourseList_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MCourse ()
@property (retain) NSString* name;
@property int32_t type;
@property (retain) NSString* grade;
@property (retain) NSString* point;
@end

@implementation MCourse

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasGrade {
  return !!hasGrade_;
}
- (void) setHasGrade:(BOOL) value {
  hasGrade_ = !!value;
}
@synthesize grade;
- (BOOL) hasPoint {
  return !!hasPoint_;
}
- (void) setHasPoint:(BOOL) value {
  hasPoint_ = !!value;
}
@synthesize point;
- (void) dealloc {
  self.name = nil;
  self.grade = nil;
  self.point = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.type = 0;
    self.grade = @"";
    self.point = @"";
  }
  return self;
}
static MCourse* defaultMCourseInstance = nil;
+ (void) initialize {
  if (self == [MCourse class]) {
    defaultMCourseInstance = [[MCourse alloc] init];
  }
}
+ (MCourse*) defaultInstance {
  return defaultMCourseInstance;
}
- (MCourse*) defaultInstance {
  return defaultMCourseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasGrade) {
    [output writeString:3 value:self.grade];
  }
  if (self.hasPoint) {
    [output writeString:4 value:self.point];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasType) {
    size += computeInt32Size(2, self.type);
  }
  if (self.hasGrade) {
    size += computeStringSize(3, self.grade);
  }
  if (self.hasPoint) {
    size += computeStringSize(4, self.point);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCourse*) parseFromData:(NSData*) data {
  return (MCourse*)[[[MCourse builder] mergeFromData:data] build];
}
+ (MCourse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCourse*)[[[MCourse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCourse*) parseFromInputStream:(NSInputStream*) input {
  return (MCourse*)[[[MCourse builder] mergeFromInputStream:input] build];
}
+ (MCourse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCourse*)[[[MCourse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCourse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCourse*)[[[MCourse builder] mergeFromCodedInputStream:input] build];
}
+ (MCourse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCourse*)[[[MCourse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCourse_Builder*) builder {
  return [[[MCourse_Builder alloc] init] autorelease];
}
+ (MCourse_Builder*) builderWithPrototype:(MCourse*) prototype {
  return [[MCourse builder] mergeFrom:prototype];
}
- (MCourse_Builder*) builder {
  return [MCourse builder];
}
@end

@interface MCourse_Builder()
@property (retain) MCourse* result;
@end

@implementation MCourse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MCourse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MCourse_Builder*) clear {
  self.result = [[[MCourse alloc] init] autorelease];
  return self;
}
- (MCourse_Builder*) clone {
  return [MCourse builderWithPrototype:result];
}
- (MCourse*) defaultInstance {
  return [MCourse defaultInstance];
}
- (MCourse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCourse*) buildPartial {
  MCourse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MCourse_Builder*) mergeFrom:(MCourse*) other {
  if (other == [MCourse defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasGrade) {
    [self setGrade:other.grade];
  }
  if (other.hasPoint) {
    [self setPoint:other.point];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCourse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCourse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 26: {
        [self setGrade:[input readString]];
        break;
      }
      case 34: {
        [self setPoint:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MCourse_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MCourse_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (int32_t) type {
  return result.type;
}
- (MCourse_Builder*) setType:(int32_t) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MCourse_Builder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasGrade {
  return result.hasGrade;
}
- (NSString*) grade {
  return result.grade;
}
- (MCourse_Builder*) setGrade:(NSString*) value {
  result.hasGrade = YES;
  result.grade = value;
  return self;
}
- (MCourse_Builder*) clearGrade {
  result.hasGrade = NO;
  result.grade = @"";
  return self;
}
- (BOOL) hasPoint {
  return result.hasPoint;
}
- (NSString*) point {
  return result.point;
}
- (MCourse_Builder*) setPoint:(NSString*) value {
  result.hasPoint = YES;
  result.point = value;
  return self;
}
- (MCourse_Builder*) clearPoint {
  result.hasPoint = NO;
  result.point = @"";
  return self;
}
@end

@interface MTermList ()
@property (retain) NSMutableArray* mutableTermList;
@property (retain) NSData* img;
@end

@implementation MTermList

@synthesize mutableTermList;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.mutableTermList = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.img = [NSData data];
  }
  return self;
}
static MTermList* defaultMTermListInstance = nil;
+ (void) initialize {
  if (self == [MTermList class]) {
    defaultMTermListInstance = [[MTermList alloc] init];
  }
}
+ (MTermList*) defaultInstance {
  return defaultMTermListInstance;
}
- (MTermList*) defaultInstance {
  return defaultMTermListInstance;
}
- (NSArray*) termList {
  return mutableTermList;
}
- (MTerm*) termAtIndex:(int32_t) index {
  id value = [mutableTermList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MTerm* element in self.termList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasImg) {
    [output writeData:2 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MTerm* element in self.termList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasImg) {
    size += computeDataSize(2, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTermList*) parseFromData:(NSData*) data {
  return (MTermList*)[[[MTermList builder] mergeFromData:data] build];
}
+ (MTermList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTermList*)[[[MTermList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTermList*) parseFromInputStream:(NSInputStream*) input {
  return (MTermList*)[[[MTermList builder] mergeFromInputStream:input] build];
}
+ (MTermList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTermList*)[[[MTermList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTermList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTermList*)[[[MTermList builder] mergeFromCodedInputStream:input] build];
}
+ (MTermList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTermList*)[[[MTermList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTermList_Builder*) builder {
  return [[[MTermList_Builder alloc] init] autorelease];
}
+ (MTermList_Builder*) builderWithPrototype:(MTermList*) prototype {
  return [[MTermList builder] mergeFrom:prototype];
}
- (MTermList_Builder*) builder {
  return [MTermList builder];
}
@end

@interface MTermList_Builder()
@property (retain) MTermList* result;
@end

@implementation MTermList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTermList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTermList_Builder*) clear {
  self.result = [[[MTermList alloc] init] autorelease];
  return self;
}
- (MTermList_Builder*) clone {
  return [MTermList builderWithPrototype:result];
}
- (MTermList*) defaultInstance {
  return [MTermList defaultInstance];
}
- (MTermList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTermList*) buildPartial {
  MTermList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTermList_Builder*) mergeFrom:(MTermList*) other {
  if (other == [MTermList defaultInstance]) {
    return self;
  }
  if (other.mutableTermList.count > 0) {
    if (result.mutableTermList == nil) {
      result.mutableTermList = [NSMutableArray array];
    }
    [result.mutableTermList addObjectsFromArray:other.mutableTermList];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTermList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTermList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MTerm_Builder* subBuilder = [MTerm builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTerm:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) termList {
  if (result.mutableTermList == nil) { return [NSArray array]; }
  return result.mutableTermList;
}
- (MTerm*) termAtIndex:(int32_t) index {
  return [result termAtIndex:index];
}
- (MTermList_Builder*) replaceTermAtIndex:(int32_t) index with:(MTerm*) value {
  [result.mutableTermList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MTermList_Builder*) addAllTerm:(NSArray*) values {
  if (result.mutableTermList == nil) {
    result.mutableTermList = [NSMutableArray array];
  }
  [result.mutableTermList addObjectsFromArray:values];
  return self;
}
- (MTermList_Builder*) clearTermList {
  result.mutableTermList = nil;
  return self;
}
- (MTermList_Builder*) addTerm:(MTerm*) value {
  if (result.mutableTermList == nil) {
    result.mutableTermList = [NSMutableArray array];
  }
  [result.mutableTermList addObject:value];
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MTermList_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MTermList_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MTerm ()
@property (retain) NSString* name;
@property (retain) NSString* url;
@end

@implementation MTerm

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (void) dealloc {
  self.name = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.url = @"";
  }
  return self;
}
static MTerm* defaultMTermInstance = nil;
+ (void) initialize {
  if (self == [MTerm class]) {
    defaultMTermInstance = [[MTerm alloc] init];
  }
}
+ (MTerm*) defaultInstance {
  return defaultMTermInstance;
}
- (MTerm*) defaultInstance {
  return defaultMTermInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasUrl) {
    [output writeString:2 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasUrl) {
    size += computeStringSize(2, self.url);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTerm*) parseFromData:(NSData*) data {
  return (MTerm*)[[[MTerm builder] mergeFromData:data] build];
}
+ (MTerm*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTerm*)[[[MTerm builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTerm*) parseFromInputStream:(NSInputStream*) input {
  return (MTerm*)[[[MTerm builder] mergeFromInputStream:input] build];
}
+ (MTerm*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTerm*)[[[MTerm builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTerm*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTerm*)[[[MTerm builder] mergeFromCodedInputStream:input] build];
}
+ (MTerm*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTerm*)[[[MTerm builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTerm_Builder*) builder {
  return [[[MTerm_Builder alloc] init] autorelease];
}
+ (MTerm_Builder*) builderWithPrototype:(MTerm*) prototype {
  return [[MTerm builder] mergeFrom:prototype];
}
- (MTerm_Builder*) builder {
  return [MTerm builder];
}
@end

@interface MTerm_Builder()
@property (retain) MTerm* result;
@end

@implementation MTerm_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTerm alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTerm_Builder*) clear {
  self.result = [[[MTerm alloc] init] autorelease];
  return self;
}
- (MTerm_Builder*) clone {
  return [MTerm builderWithPrototype:result];
}
- (MTerm*) defaultInstance {
  return [MTerm defaultInstance];
}
- (MTerm*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTerm*) buildPartial {
  MTerm* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTerm_Builder*) mergeFrom:(MTerm*) other {
  if (other == [MTerm defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTerm_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTerm_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MTerm_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MTerm_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (MTerm_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (MTerm_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
@end

@interface MCardList ()
@property (retain) NSMutableArray* mutableCardList;
@property (retain) NSData* img;
@end

@implementation MCardList

@synthesize mutableCardList;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.mutableCardList = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.img = [NSData data];
  }
  return self;
}
static MCardList* defaultMCardListInstance = nil;
+ (void) initialize {
  if (self == [MCardList class]) {
    defaultMCardListInstance = [[MCardList alloc] init];
  }
}
+ (MCardList*) defaultInstance {
  return defaultMCardListInstance;
}
- (MCardList*) defaultInstance {
  return defaultMCardListInstance;
}
- (NSArray*) cardList {
  return mutableCardList;
}
- (MCard*) cardAtIndex:(int32_t) index {
  id value = [mutableCardList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MCard* element in self.cardList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasImg) {
    [output writeData:2 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MCard* element in self.cardList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasImg) {
    size += computeDataSize(2, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCardList*) parseFromData:(NSData*) data {
  return (MCardList*)[[[MCardList builder] mergeFromData:data] build];
}
+ (MCardList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCardList*)[[[MCardList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCardList*) parseFromInputStream:(NSInputStream*) input {
  return (MCardList*)[[[MCardList builder] mergeFromInputStream:input] build];
}
+ (MCardList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCardList*)[[[MCardList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCardList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCardList*)[[[MCardList builder] mergeFromCodedInputStream:input] build];
}
+ (MCardList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCardList*)[[[MCardList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCardList_Builder*) builder {
  return [[[MCardList_Builder alloc] init] autorelease];
}
+ (MCardList_Builder*) builderWithPrototype:(MCardList*) prototype {
  return [[MCardList builder] mergeFrom:prototype];
}
- (MCardList_Builder*) builder {
  return [MCardList builder];
}
@end

@interface MCardList_Builder()
@property (retain) MCardList* result;
@end

@implementation MCardList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MCardList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MCardList_Builder*) clear {
  self.result = [[[MCardList alloc] init] autorelease];
  return self;
}
- (MCardList_Builder*) clone {
  return [MCardList builderWithPrototype:result];
}
- (MCardList*) defaultInstance {
  return [MCardList defaultInstance];
}
- (MCardList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCardList*) buildPartial {
  MCardList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MCardList_Builder*) mergeFrom:(MCardList*) other {
  if (other == [MCardList defaultInstance]) {
    return self;
  }
  if (other.mutableCardList.count > 0) {
    if (result.mutableCardList == nil) {
      result.mutableCardList = [NSMutableArray array];
    }
    [result.mutableCardList addObjectsFromArray:other.mutableCardList];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCardList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCardList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MCard_Builder* subBuilder = [MCard builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCard:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) cardList {
  if (result.mutableCardList == nil) { return [NSArray array]; }
  return result.mutableCardList;
}
- (MCard*) cardAtIndex:(int32_t) index {
  return [result cardAtIndex:index];
}
- (MCardList_Builder*) replaceCardAtIndex:(int32_t) index with:(MCard*) value {
  [result.mutableCardList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MCardList_Builder*) addAllCard:(NSArray*) values {
  if (result.mutableCardList == nil) {
    result.mutableCardList = [NSMutableArray array];
  }
  [result.mutableCardList addObjectsFromArray:values];
  return self;
}
- (MCardList_Builder*) clearCardList {
  result.mutableCardList = nil;
  return self;
}
- (MCardList_Builder*) addCard:(MCard*) value {
  if (result.mutableCardList == nil) {
    result.mutableCardList = [NSMutableArray array];
  }
  [result.mutableCardList addObject:value];
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MCardList_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MCardList_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MCard ()
@property (retain) NSString* name;
@property (retain) NSString* total;
@property (retain) NSString* cost;
@property (retain) NSString* time;
@end

@implementation MCard

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) value {
  hasTotal_ = !!value;
}
@synthesize total;
- (BOOL) hasCost {
  return !!hasCost_;
}
- (void) setHasCost:(BOOL) value {
  hasCost_ = !!value;
}
@synthesize cost;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (void) dealloc {
  self.name = nil;
  self.total = nil;
  self.cost = nil;
  self.time = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.total = @"";
    self.cost = @"";
    self.time = @"";
  }
  return self;
}
static MCard* defaultMCardInstance = nil;
+ (void) initialize {
  if (self == [MCard class]) {
    defaultMCardInstance = [[MCard alloc] init];
  }
}
+ (MCard*) defaultInstance {
  return defaultMCardInstance;
}
- (MCard*) defaultInstance {
  return defaultMCardInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasTotal) {
    [output writeString:2 value:self.total];
  }
  if (self.hasCost) {
    [output writeString:3 value:self.cost];
  }
  if (self.hasTime) {
    [output writeString:4 value:self.time];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasTotal) {
    size += computeStringSize(2, self.total);
  }
  if (self.hasCost) {
    size += computeStringSize(3, self.cost);
  }
  if (self.hasTime) {
    size += computeStringSize(4, self.time);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCard*) parseFromData:(NSData*) data {
  return (MCard*)[[[MCard builder] mergeFromData:data] build];
}
+ (MCard*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCard*)[[[MCard builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCard*) parseFromInputStream:(NSInputStream*) input {
  return (MCard*)[[[MCard builder] mergeFromInputStream:input] build];
}
+ (MCard*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCard*)[[[MCard builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCard*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCard*)[[[MCard builder] mergeFromCodedInputStream:input] build];
}
+ (MCard*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCard*)[[[MCard builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCard_Builder*) builder {
  return [[[MCard_Builder alloc] init] autorelease];
}
+ (MCard_Builder*) builderWithPrototype:(MCard*) prototype {
  return [[MCard builder] mergeFrom:prototype];
}
- (MCard_Builder*) builder {
  return [MCard builder];
}
@end

@interface MCard_Builder()
@property (retain) MCard* result;
@end

@implementation MCard_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MCard alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MCard_Builder*) clear {
  self.result = [[[MCard alloc] init] autorelease];
  return self;
}
- (MCard_Builder*) clone {
  return [MCard builderWithPrototype:result];
}
- (MCard*) defaultInstance {
  return [MCard defaultInstance];
}
- (MCard*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCard*) buildPartial {
  MCard* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MCard_Builder*) mergeFrom:(MCard*) other {
  if (other == [MCard defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasCost) {
    [self setCost:other.cost];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCard_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCard_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setTotal:[input readString]];
        break;
      }
      case 26: {
        [self setCost:[input readString]];
        break;
      }
      case 34: {
        [self setTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MCard_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MCard_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasTotal {
  return result.hasTotal;
}
- (NSString*) total {
  return result.total;
}
- (MCard_Builder*) setTotal:(NSString*) value {
  result.hasTotal = YES;
  result.total = value;
  return self;
}
- (MCard_Builder*) clearTotal {
  result.hasTotal = NO;
  result.total = @"";
  return self;
}
- (BOOL) hasCost {
  return result.hasCost;
}
- (NSString*) cost {
  return result.cost;
}
- (MCard_Builder*) setCost:(NSString*) value {
  result.hasCost = YES;
  result.cost = value;
  return self;
}
- (MCard_Builder*) clearCost {
  result.hasCost = NO;
  result.cost = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MCard_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MCard_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
@end

@interface MContactList ()
@property (retain) NSMutableArray* mutableListList;
@end

@implementation MContactList

@synthesize mutableListList;
- (void) dealloc {
  self.mutableListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MContactList* defaultMContactListInstance = nil;
+ (void) initialize {
  if (self == [MContactList class]) {
    defaultMContactListInstance = [[MContactList alloc] init];
  }
}
+ (MContactList*) defaultInstance {
  return defaultMContactListInstance;
}
- (MContactList*) defaultInstance {
  return defaultMContactListInstance;
}
- (NSArray*) listList {
  return mutableListList;
}
- (MContacts*) listAtIndex:(int32_t) index {
  id value = [mutableListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MContacts* element in self.listList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MContacts* element in self.listList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MContactList*) parseFromData:(NSData*) data {
  return (MContactList*)[[[MContactList builder] mergeFromData:data] build];
}
+ (MContactList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContactList*)[[[MContactList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MContactList*) parseFromInputStream:(NSInputStream*) input {
  return (MContactList*)[[[MContactList builder] mergeFromInputStream:input] build];
}
+ (MContactList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContactList*)[[[MContactList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MContactList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MContactList*)[[[MContactList builder] mergeFromCodedInputStream:input] build];
}
+ (MContactList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContactList*)[[[MContactList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MContactList_Builder*) builder {
  return [[[MContactList_Builder alloc] init] autorelease];
}
+ (MContactList_Builder*) builderWithPrototype:(MContactList*) prototype {
  return [[MContactList builder] mergeFrom:prototype];
}
- (MContactList_Builder*) builder {
  return [MContactList builder];
}
@end

@interface MContactList_Builder()
@property (retain) MContactList* result;
@end

@implementation MContactList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MContactList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MContactList_Builder*) clear {
  self.result = [[[MContactList alloc] init] autorelease];
  return self;
}
- (MContactList_Builder*) clone {
  return [MContactList builderWithPrototype:result];
}
- (MContactList*) defaultInstance {
  return [MContactList defaultInstance];
}
- (MContactList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MContactList*) buildPartial {
  MContactList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MContactList_Builder*) mergeFrom:(MContactList*) other {
  if (other == [MContactList defaultInstance]) {
    return self;
  }
  if (other.mutableListList.count > 0) {
    if (result.mutableListList == nil) {
      result.mutableListList = [NSMutableArray array];
    }
    [result.mutableListList addObjectsFromArray:other.mutableListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MContactList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MContactList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MContacts_Builder* subBuilder = [MContacts builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) listList {
  if (result.mutableListList == nil) { return [NSArray array]; }
  return result.mutableListList;
}
- (MContacts*) listAtIndex:(int32_t) index {
  return [result listAtIndex:index];
}
- (MContactList_Builder*) replaceListAtIndex:(int32_t) index with:(MContacts*) value {
  [result.mutableListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MContactList_Builder*) addAllList:(NSArray*) values {
  if (result.mutableListList == nil) {
    result.mutableListList = [NSMutableArray array];
  }
  [result.mutableListList addObjectsFromArray:values];
  return self;
}
- (MContactList_Builder*) clearListList {
  result.mutableListList = nil;
  return self;
}
- (MContactList_Builder*) addList:(MContacts*) value {
  if (result.mutableListList == nil) {
    result.mutableListList = [NSMutableArray array];
  }
  [result.mutableListList addObject:value];
  return self;
}
@end

@interface MContacts ()
@property (retain) NSString* name;
@property (retain) NSMutableArray* mutableContactList;
@end

@implementation MContacts

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
@synthesize mutableContactList;
- (void) dealloc {
  self.name = nil;
  self.mutableContactList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static MContacts* defaultMContactsInstance = nil;
+ (void) initialize {
  if (self == [MContacts class]) {
    defaultMContactsInstance = [[MContacts alloc] init];
  }
}
+ (MContacts*) defaultInstance {
  return defaultMContactsInstance;
}
- (MContacts*) defaultInstance {
  return defaultMContactsInstance;
}
- (NSArray*) contactList {
  return mutableContactList;
}
- (MContact*) contactAtIndex:(int32_t) index {
  id value = [mutableContactList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  for (MContact* element in self.contactList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  for (MContact* element in self.contactList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MContacts*) parseFromData:(NSData*) data {
  return (MContacts*)[[[MContacts builder] mergeFromData:data] build];
}
+ (MContacts*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContacts*)[[[MContacts builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MContacts*) parseFromInputStream:(NSInputStream*) input {
  return (MContacts*)[[[MContacts builder] mergeFromInputStream:input] build];
}
+ (MContacts*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContacts*)[[[MContacts builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MContacts*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MContacts*)[[[MContacts builder] mergeFromCodedInputStream:input] build];
}
+ (MContacts*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContacts*)[[[MContacts builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MContacts_Builder*) builder {
  return [[[MContacts_Builder alloc] init] autorelease];
}
+ (MContacts_Builder*) builderWithPrototype:(MContacts*) prototype {
  return [[MContacts builder] mergeFrom:prototype];
}
- (MContacts_Builder*) builder {
  return [MContacts builder];
}
@end

@interface MContacts_Builder()
@property (retain) MContacts* result;
@end

@implementation MContacts_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MContacts alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MContacts_Builder*) clear {
  self.result = [[[MContacts alloc] init] autorelease];
  return self;
}
- (MContacts_Builder*) clone {
  return [MContacts builderWithPrototype:result];
}
- (MContacts*) defaultInstance {
  return [MContacts defaultInstance];
}
- (MContacts*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MContacts*) buildPartial {
  MContacts* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MContacts_Builder*) mergeFrom:(MContacts*) other {
  if (other == [MContacts defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.mutableContactList.count > 0) {
    if (result.mutableContactList == nil) {
      result.mutableContactList = [NSMutableArray array];
    }
    [result.mutableContactList addObjectsFromArray:other.mutableContactList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MContacts_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MContacts_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        MContact_Builder* subBuilder = [MContact builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContact:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MContacts_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MContacts_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (NSArray*) contactList {
  if (result.mutableContactList == nil) { return [NSArray array]; }
  return result.mutableContactList;
}
- (MContact*) contactAtIndex:(int32_t) index {
  return [result contactAtIndex:index];
}
- (MContacts_Builder*) replaceContactAtIndex:(int32_t) index with:(MContact*) value {
  [result.mutableContactList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MContacts_Builder*) addAllContact:(NSArray*) values {
  if (result.mutableContactList == nil) {
    result.mutableContactList = [NSMutableArray array];
  }
  [result.mutableContactList addObjectsFromArray:values];
  return self;
}
- (MContacts_Builder*) clearContactList {
  result.mutableContactList = nil;
  return self;
}
- (MContacts_Builder*) addContact:(MContact*) value {
  if (result.mutableContactList == nil) {
    result.mutableContactList = [NSMutableArray array];
  }
  [result.mutableContactList addObject:value];
  return self;
}
@end

@interface MContact ()
@property (retain) NSString* name;
@property (retain) NSString* desc;
@property (retain) NSMutableArray* mutablePhoneList;
@end

@implementation MContact

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value {
  hasDesc_ = !!value;
}
@synthesize desc;
@synthesize mutablePhoneList;
- (void) dealloc {
  self.name = nil;
  self.desc = nil;
  self.mutablePhoneList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.desc = @"";
  }
  return self;
}
static MContact* defaultMContactInstance = nil;
+ (void) initialize {
  if (self == [MContact class]) {
    defaultMContactInstance = [[MContact alloc] init];
  }
}
+ (MContact*) defaultInstance {
  return defaultMContactInstance;
}
- (MContact*) defaultInstance {
  return defaultMContactInstance;
}
- (NSArray*) phoneList {
  return mutablePhoneList;
}
- (NSString*) phoneAtIndex:(int32_t) index {
  id value = [mutablePhoneList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:2 value:self.desc];
  }
  for (NSString* element in self.mutablePhoneList) {
    [output writeString:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasDesc) {
    size += computeStringSize(2, self.desc);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutablePhoneList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutablePhoneList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MContact*) parseFromData:(NSData*) data {
  return (MContact*)[[[MContact builder] mergeFromData:data] build];
}
+ (MContact*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContact*)[[[MContact builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MContact*) parseFromInputStream:(NSInputStream*) input {
  return (MContact*)[[[MContact builder] mergeFromInputStream:input] build];
}
+ (MContact*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContact*)[[[MContact builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MContact*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MContact*)[[[MContact builder] mergeFromCodedInputStream:input] build];
}
+ (MContact*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MContact*)[[[MContact builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MContact_Builder*) builder {
  return [[[MContact_Builder alloc] init] autorelease];
}
+ (MContact_Builder*) builderWithPrototype:(MContact*) prototype {
  return [[MContact builder] mergeFrom:prototype];
}
- (MContact_Builder*) builder {
  return [MContact builder];
}
@end

@interface MContact_Builder()
@property (retain) MContact* result;
@end

@implementation MContact_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MContact alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MContact_Builder*) clear {
  self.result = [[[MContact alloc] init] autorelease];
  return self;
}
- (MContact_Builder*) clone {
  return [MContact builderWithPrototype:result];
}
- (MContact*) defaultInstance {
  return [MContact defaultInstance];
}
- (MContact*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MContact*) buildPartial {
  MContact* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MContact_Builder*) mergeFrom:(MContact*) other {
  if (other == [MContact defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.mutablePhoneList.count > 0) {
    if (result.mutablePhoneList == nil) {
      result.mutablePhoneList = [NSMutableArray array];
    }
    [result.mutablePhoneList addObjectsFromArray:other.mutablePhoneList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MContact_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MContact_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setDesc:[input readString]];
        break;
      }
      case 26: {
        [self addPhone:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MContact_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MContact_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (MContact_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (MContact_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (NSArray*) phoneList {
  if (result.mutablePhoneList == nil) {
    return [NSArray array];
  }
  return result.mutablePhoneList;
}
- (NSString*) phoneAtIndex:(int32_t) index {
  return [result phoneAtIndex:index];
}
- (MContact_Builder*) replacePhoneAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutablePhoneList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MContact_Builder*) addPhone:(NSString*) value {
  if (result.mutablePhoneList == nil) {
    result.mutablePhoneList = [NSMutableArray array];
  }
  [result.mutablePhoneList addObject:value];
  return self;
}
- (MContact_Builder*) addAllPhone:(NSArray*) values {
  if (result.mutablePhoneList == nil) {
    result.mutablePhoneList = [NSMutableArray array];
  }
  [result.mutablePhoneList addObjectsFromArray:values];
  return self;
}
- (MContact_Builder*) clearPhoneList {
  result.mutablePhoneList = nil;
  return self;
}
@end

@interface MBusList ()
@property (retain) NSMutableArray* mutableBusList;
@end

@implementation MBusList

@synthesize mutableBusList;
- (void) dealloc {
  self.mutableBusList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MBusList* defaultMBusListInstance = nil;
+ (void) initialize {
  if (self == [MBusList class]) {
    defaultMBusListInstance = [[MBusList alloc] init];
  }
}
+ (MBusList*) defaultInstance {
  return defaultMBusListInstance;
}
- (MBusList*) defaultInstance {
  return defaultMBusListInstance;
}
- (NSArray*) busList {
  return mutableBusList;
}
- (MBus*) busAtIndex:(int32_t) index {
  id value = [mutableBusList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MBus* element in self.busList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MBus* element in self.busList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MBusList*) parseFromData:(NSData*) data {
  return (MBusList*)[[[MBusList builder] mergeFromData:data] build];
}
+ (MBusList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBusList*)[[[MBusList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MBusList*) parseFromInputStream:(NSInputStream*) input {
  return (MBusList*)[[[MBusList builder] mergeFromInputStream:input] build];
}
+ (MBusList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBusList*)[[[MBusList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBusList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MBusList*)[[[MBusList builder] mergeFromCodedInputStream:input] build];
}
+ (MBusList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBusList*)[[[MBusList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBusList_Builder*) builder {
  return [[[MBusList_Builder alloc] init] autorelease];
}
+ (MBusList_Builder*) builderWithPrototype:(MBusList*) prototype {
  return [[MBusList builder] mergeFrom:prototype];
}
- (MBusList_Builder*) builder {
  return [MBusList builder];
}
@end

@interface MBusList_Builder()
@property (retain) MBusList* result;
@end

@implementation MBusList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MBusList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MBusList_Builder*) clear {
  self.result = [[[MBusList alloc] init] autorelease];
  return self;
}
- (MBusList_Builder*) clone {
  return [MBusList builderWithPrototype:result];
}
- (MBusList*) defaultInstance {
  return [MBusList defaultInstance];
}
- (MBusList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MBusList*) buildPartial {
  MBusList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MBusList_Builder*) mergeFrom:(MBusList*) other {
  if (other == [MBusList defaultInstance]) {
    return self;
  }
  if (other.mutableBusList.count > 0) {
    if (result.mutableBusList == nil) {
      result.mutableBusList = [NSMutableArray array];
    }
    [result.mutableBusList addObjectsFromArray:other.mutableBusList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MBusList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MBusList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MBus_Builder* subBuilder = [MBus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBus:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) busList {
  if (result.mutableBusList == nil) { return [NSArray array]; }
  return result.mutableBusList;
}
- (MBus*) busAtIndex:(int32_t) index {
  return [result busAtIndex:index];
}
- (MBusList_Builder*) replaceBusAtIndex:(int32_t) index with:(MBus*) value {
  [result.mutableBusList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MBusList_Builder*) addAllBus:(NSArray*) values {
  if (result.mutableBusList == nil) {
    result.mutableBusList = [NSMutableArray array];
  }
  [result.mutableBusList addObjectsFromArray:values];
  return self;
}
- (MBusList_Builder*) clearBusList {
  result.mutableBusList = nil;
  return self;
}
- (MBusList_Builder*) addBus:(MBus*) value {
  if (result.mutableBusList == nil) {
    result.mutableBusList = [NSMutableArray array];
  }
  [result.mutableBusList addObject:value];
  return self;
}
@end

@interface MBus ()
@property (retain) NSString* name;
@property (retain) NSString* begin;
@property (retain) NSString* info;
@property int32_t count;
@property (retain) NSString* process;
@end

@implementation MBus

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasBegin {
  return !!hasBegin_;
}
- (void) setHasBegin:(BOOL) value {
  hasBegin_ = !!value;
}
@synthesize begin;
- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) value {
  hasInfo_ = !!value;
}
@synthesize info;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
- (BOOL) hasProcess {
  return !!hasProcess_;
}
- (void) setHasProcess:(BOOL) value {
  hasProcess_ = !!value;
}
@synthesize process;
- (void) dealloc {
  self.name = nil;
  self.begin = nil;
  self.info = nil;
  self.process = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.begin = @"";
    self.info = @"";
    self.count = 0;
    self.process = @"";
  }
  return self;
}
static MBus* defaultMBusInstance = nil;
+ (void) initialize {
  if (self == [MBus class]) {
    defaultMBusInstance = [[MBus alloc] init];
  }
}
+ (MBus*) defaultInstance {
  return defaultMBusInstance;
}
- (MBus*) defaultInstance {
  return defaultMBusInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasBegin) {
    [output writeString:2 value:self.begin];
  }
  if (self.hasInfo) {
    [output writeString:3 value:self.info];
  }
  if (self.hasCount) {
    [output writeInt32:4 value:self.count];
  }
  if (self.hasProcess) {
    [output writeString:5 value:self.process];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasBegin) {
    size += computeStringSize(2, self.begin);
  }
  if (self.hasInfo) {
    size += computeStringSize(3, self.info);
  }
  if (self.hasCount) {
    size += computeInt32Size(4, self.count);
  }
  if (self.hasProcess) {
    size += computeStringSize(5, self.process);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MBus*) parseFromData:(NSData*) data {
  return (MBus*)[[[MBus builder] mergeFromData:data] build];
}
+ (MBus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBus*)[[[MBus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MBus*) parseFromInputStream:(NSInputStream*) input {
  return (MBus*)[[[MBus builder] mergeFromInputStream:input] build];
}
+ (MBus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBus*)[[[MBus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MBus*)[[[MBus builder] mergeFromCodedInputStream:input] build];
}
+ (MBus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBus*)[[[MBus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBus_Builder*) builder {
  return [[[MBus_Builder alloc] init] autorelease];
}
+ (MBus_Builder*) builderWithPrototype:(MBus*) prototype {
  return [[MBus builder] mergeFrom:prototype];
}
- (MBus_Builder*) builder {
  return [MBus builder];
}
@end

@interface MBus_Builder()
@property (retain) MBus* result;
@end

@implementation MBus_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MBus alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MBus_Builder*) clear {
  self.result = [[[MBus alloc] init] autorelease];
  return self;
}
- (MBus_Builder*) clone {
  return [MBus builderWithPrototype:result];
}
- (MBus*) defaultInstance {
  return [MBus defaultInstance];
}
- (MBus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MBus*) buildPartial {
  MBus* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MBus_Builder*) mergeFrom:(MBus*) other {
  if (other == [MBus defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasBegin) {
    [self setBegin:other.begin];
  }
  if (other.hasInfo) {
    [self setInfo:other.info];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasProcess) {
    [self setProcess:other.process];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MBus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MBus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setBegin:[input readString]];
        break;
      }
      case 26: {
        [self setInfo:[input readString]];
        break;
      }
      case 32: {
        [self setCount:[input readInt32]];
        break;
      }
      case 42: {
        [self setProcess:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MBus_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MBus_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasBegin {
  return result.hasBegin;
}
- (NSString*) begin {
  return result.begin;
}
- (MBus_Builder*) setBegin:(NSString*) value {
  result.hasBegin = YES;
  result.begin = value;
  return self;
}
- (MBus_Builder*) clearBegin {
  result.hasBegin = NO;
  result.begin = @"";
  return self;
}
- (BOOL) hasInfo {
  return result.hasInfo;
}
- (NSString*) info {
  return result.info;
}
- (MBus_Builder*) setInfo:(NSString*) value {
  result.hasInfo = YES;
  result.info = value;
  return self;
}
- (MBus_Builder*) clearInfo {
  result.hasInfo = NO;
  result.info = @"";
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (MBus_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (MBus_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
- (BOOL) hasProcess {
  return result.hasProcess;
}
- (NSString*) process {
  return result.process;
}
- (MBus_Builder*) setProcess:(NSString*) value {
  result.hasProcess = YES;
  result.process = value;
  return self;
}
- (MBus_Builder*) clearProcess {
  result.hasProcess = NO;
  result.process = @"";
  return self;
}
@end

@interface MSignInList ()
@property (retain) NSString* name;
@property int32_t count;
@property (retain) NSMutableArray* mutableBusList;
@end

@implementation MSignInList

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value {
  hasCount_ = !!value;
}
@synthesize count;
@synthesize mutableBusList;
- (void) dealloc {
  self.name = nil;
  self.mutableBusList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.count = 0;
  }
  return self;
}
static MSignInList* defaultMSignInListInstance = nil;
+ (void) initialize {
  if (self == [MSignInList class]) {
    defaultMSignInListInstance = [[MSignInList alloc] init];
  }
}
+ (MSignInList*) defaultInstance {
  return defaultMSignInListInstance;
}
- (MSignInList*) defaultInstance {
  return defaultMSignInListInstance;
}
- (NSArray*) busList {
  return mutableBusList;
}
- (MSignIn*) busAtIndex:(int32_t) index {
  id value = [mutableBusList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasCount) {
    [output writeInt32:2 value:self.count];
  }
  for (MSignIn* element in self.busList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasCount) {
    size += computeInt32Size(2, self.count);
  }
  for (MSignIn* element in self.busList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MSignInList*) parseFromData:(NSData*) data {
  return (MSignInList*)[[[MSignInList builder] mergeFromData:data] build];
}
+ (MSignInList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MSignInList*)[[[MSignInList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MSignInList*) parseFromInputStream:(NSInputStream*) input {
  return (MSignInList*)[[[MSignInList builder] mergeFromInputStream:input] build];
}
+ (MSignInList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MSignInList*)[[[MSignInList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MSignInList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MSignInList*)[[[MSignInList builder] mergeFromCodedInputStream:input] build];
}
+ (MSignInList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MSignInList*)[[[MSignInList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MSignInList_Builder*) builder {
  return [[[MSignInList_Builder alloc] init] autorelease];
}
+ (MSignInList_Builder*) builderWithPrototype:(MSignInList*) prototype {
  return [[MSignInList builder] mergeFrom:prototype];
}
- (MSignInList_Builder*) builder {
  return [MSignInList builder];
}
@end

@interface MSignInList_Builder()
@property (retain) MSignInList* result;
@end

@implementation MSignInList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MSignInList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MSignInList_Builder*) clear {
  self.result = [[[MSignInList alloc] init] autorelease];
  return self;
}
- (MSignInList_Builder*) clone {
  return [MSignInList builderWithPrototype:result];
}
- (MSignInList*) defaultInstance {
  return [MSignInList defaultInstance];
}
- (MSignInList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MSignInList*) buildPartial {
  MSignInList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MSignInList_Builder*) mergeFrom:(MSignInList*) other {
  if (other == [MSignInList defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.mutableBusList.count > 0) {
    if (result.mutableBusList == nil) {
      result.mutableBusList = [NSMutableArray array];
    }
    [result.mutableBusList addObjectsFromArray:other.mutableBusList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MSignInList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MSignInList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setCount:[input readInt32]];
        break;
      }
      case 26: {
        MSignIn_Builder* subBuilder = [MSignIn builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBus:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MSignInList_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MSignInList_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (int32_t) count {
  return result.count;
}
- (MSignInList_Builder*) setCount:(int32_t) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (MSignInList_Builder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
- (NSArray*) busList {
  if (result.mutableBusList == nil) { return [NSArray array]; }
  return result.mutableBusList;
}
- (MSignIn*) busAtIndex:(int32_t) index {
  return [result busAtIndex:index];
}
- (MSignInList_Builder*) replaceBusAtIndex:(int32_t) index with:(MSignIn*) value {
  [result.mutableBusList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MSignInList_Builder*) addAllBus:(NSArray*) values {
  if (result.mutableBusList == nil) {
    result.mutableBusList = [NSMutableArray array];
  }
  [result.mutableBusList addObjectsFromArray:values];
  return self;
}
- (MSignInList_Builder*) clearBusList {
  result.mutableBusList = nil;
  return self;
}
- (MSignInList_Builder*) addBus:(MSignIn*) value {
  if (result.mutableBusList == nil) {
    result.mutableBusList = [NSMutableArray array];
  }
  [result.mutableBusList addObject:value];
  return self;
}
@end

@interface MSignIn ()
@property (retain) NSString* time;
@property (retain) NSString* begin;
@property (retain) NSString* end;
@end

@implementation MSignIn

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasBegin {
  return !!hasBegin_;
}
- (void) setHasBegin:(BOOL) value {
  hasBegin_ = !!value;
}
@synthesize begin;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) value {
  hasEnd_ = !!value;
}
@synthesize end;
- (void) dealloc {
  self.time = nil;
  self.begin = nil;
  self.end = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.time = @"";
    self.begin = @"";
    self.end = @"";
  }
  return self;
}
static MSignIn* defaultMSignInInstance = nil;
+ (void) initialize {
  if (self == [MSignIn class]) {
    defaultMSignInInstance = [[MSignIn alloc] init];
  }
}
+ (MSignIn*) defaultInstance {
  return defaultMSignInInstance;
}
- (MSignIn*) defaultInstance {
  return defaultMSignInInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeString:1 value:self.time];
  }
  if (self.hasBegin) {
    [output writeString:2 value:self.begin];
  }
  if (self.hasEnd) {
    [output writeString:3 value:self.end];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTime) {
    size += computeStringSize(1, self.time);
  }
  if (self.hasBegin) {
    size += computeStringSize(2, self.begin);
  }
  if (self.hasEnd) {
    size += computeStringSize(3, self.end);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MSignIn*) parseFromData:(NSData*) data {
  return (MSignIn*)[[[MSignIn builder] mergeFromData:data] build];
}
+ (MSignIn*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MSignIn*)[[[MSignIn builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MSignIn*) parseFromInputStream:(NSInputStream*) input {
  return (MSignIn*)[[[MSignIn builder] mergeFromInputStream:input] build];
}
+ (MSignIn*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MSignIn*)[[[MSignIn builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MSignIn*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MSignIn*)[[[MSignIn builder] mergeFromCodedInputStream:input] build];
}
+ (MSignIn*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MSignIn*)[[[MSignIn builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MSignIn_Builder*) builder {
  return [[[MSignIn_Builder alloc] init] autorelease];
}
+ (MSignIn_Builder*) builderWithPrototype:(MSignIn*) prototype {
  return [[MSignIn builder] mergeFrom:prototype];
}
- (MSignIn_Builder*) builder {
  return [MSignIn builder];
}
@end

@interface MSignIn_Builder()
@property (retain) MSignIn* result;
@end

@implementation MSignIn_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MSignIn alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MSignIn_Builder*) clear {
  self.result = [[[MSignIn alloc] init] autorelease];
  return self;
}
- (MSignIn_Builder*) clone {
  return [MSignIn builderWithPrototype:result];
}
- (MSignIn*) defaultInstance {
  return [MSignIn defaultInstance];
}
- (MSignIn*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MSignIn*) buildPartial {
  MSignIn* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MSignIn_Builder*) mergeFrom:(MSignIn*) other {
  if (other == [MSignIn defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasBegin) {
    [self setBegin:other.begin];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MSignIn_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MSignIn_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTime:[input readString]];
        break;
      }
      case 18: {
        [self setBegin:[input readString]];
        break;
      }
      case 26: {
        [self setEnd:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MSignIn_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MSignIn_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasBegin {
  return result.hasBegin;
}
- (NSString*) begin {
  return result.begin;
}
- (MSignIn_Builder*) setBegin:(NSString*) value {
  result.hasBegin = YES;
  result.begin = value;
  return self;
}
- (MSignIn_Builder*) clearBegin {
  result.hasBegin = NO;
  result.begin = @"";
  return self;
}
- (BOOL) hasEnd {
  return result.hasEnd;
}
- (NSString*) end {
  return result.end;
}
- (MSignIn_Builder*) setEnd:(NSString*) value {
  result.hasEnd = YES;
  result.end = value;
  return self;
}
- (MSignIn_Builder*) clearEnd {
  result.hasEnd = NO;
  result.end = @"";
  return self;
}
@end

