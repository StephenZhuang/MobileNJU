// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndTreehole.pb.h"

@implementation ZsndTreeholeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndTreeholeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MTreeHole ()
@property (retain) NSMutableArray* mutableTopicsList;
@end

@implementation MTreeHole

@synthesize mutableTopicsList;
- (void) dealloc {
  self.mutableTopicsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MTreeHole* defaultMTreeHoleInstance = nil;
+ (void) initialize {
  if (self == [MTreeHole class]) {
    defaultMTreeHoleInstance = [[MTreeHole alloc] init];
  }
}
+ (MTreeHole*) defaultInstance {
  return defaultMTreeHoleInstance;
}
- (MTreeHole*) defaultInstance {
  return defaultMTreeHoleInstance;
}
- (NSArray*) topicsList {
  return mutableTopicsList;
}
- (MTopic*) topicsAtIndex:(int32_t) index {
  id value = [mutableTopicsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MTopic* element in self.topicsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MTopic* element in self.topicsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTreeHole*) parseFromData:(NSData*) data {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromData:data] build];
}
+ (MTreeHole*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTreeHole*) parseFromInputStream:(NSInputStream*) input {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromInputStream:input] build];
}
+ (MTreeHole*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTreeHole*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromCodedInputStream:input] build];
}
+ (MTreeHole*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTreeHole_Builder*) builder {
  return [[[MTreeHole_Builder alloc] init] autorelease];
}
+ (MTreeHole_Builder*) builderWithPrototype:(MTreeHole*) prototype {
  return [[MTreeHole builder] mergeFrom:prototype];
}
- (MTreeHole_Builder*) builder {
  return [MTreeHole builder];
}
@end

@interface MTreeHole_Builder()
@property (retain) MTreeHole* result;
@end

@implementation MTreeHole_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTreeHole alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTreeHole_Builder*) clear {
  self.result = [[[MTreeHole alloc] init] autorelease];
  return self;
}
- (MTreeHole_Builder*) clone {
  return [MTreeHole builderWithPrototype:result];
}
- (MTreeHole*) defaultInstance {
  return [MTreeHole defaultInstance];
}
- (MTreeHole*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTreeHole*) buildPartial {
  MTreeHole* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTreeHole_Builder*) mergeFrom:(MTreeHole*) other {
  if (other == [MTreeHole defaultInstance]) {
    return self;
  }
  if (other.mutableTopicsList.count > 0) {
    if (result.mutableTopicsList == nil) {
      result.mutableTopicsList = [NSMutableArray array];
    }
    [result.mutableTopicsList addObjectsFromArray:other.mutableTopicsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTreeHole_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTreeHole_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MTopic_Builder* subBuilder = [MTopic builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTopics:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) topicsList {
  if (result.mutableTopicsList == nil) { return [NSArray array]; }
  return result.mutableTopicsList;
}
- (MTopic*) topicsAtIndex:(int32_t) index {
  return [result topicsAtIndex:index];
}
- (MTreeHole_Builder*) replaceTopicsAtIndex:(int32_t) index with:(MTopic*) value {
  [result.mutableTopicsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MTreeHole_Builder*) addAllTopics:(NSArray*) values {
  if (result.mutableTopicsList == nil) {
    result.mutableTopicsList = [NSMutableArray array];
  }
  [result.mutableTopicsList addObjectsFromArray:values];
  return self;
}
- (MTreeHole_Builder*) clearTopicsList {
  result.mutableTopicsList = nil;
  return self;
}
- (MTreeHole_Builder*) addTopics:(MTopic*) value {
  if (result.mutableTopicsList == nil) {
    result.mutableTopicsList = [NSMutableArray array];
  }
  [result.mutableTopicsList addObject:value];
  return self;
}
@end

@interface MTopic ()
@property (retain) NSString* id;
@property (retain) NSString* tagid;
@property (retain) NSString* tag;
@property (retain) NSString* content;
@property (retain) NSString* time;
@property (retain) NSString* img;
@property int32_t praiseCnt;
@property int32_t commentCnt;
@property int32_t hasPraise;
@property int32_t isHot;
@property int32_t isTop;
@property (retain) NSString* author;
@property (retain) NSString* createTime;
@end

@implementation MTopic

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTagid {
  return !!hasTagid_;
}
- (void) setHasTagid:(BOOL) value {
  hasTagid_ = !!value;
}
@synthesize tagid;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value {
  hasTag_ = !!value;
}
@synthesize tag;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (BOOL) hasPraiseCnt {
  return !!hasPraiseCnt_;
}
- (void) setHasPraiseCnt:(BOOL) value {
  hasPraiseCnt_ = !!value;
}
@synthesize praiseCnt;
- (BOOL) hasCommentCnt {
  return !!hasCommentCnt_;
}
- (void) setHasCommentCnt:(BOOL) value {
  hasCommentCnt_ = !!value;
}
@synthesize commentCnt;
- (BOOL) hasHasPraise {
  return !!hasHasPraise_;
}
- (void) setHasHasPraise:(BOOL) value {
  hasHasPraise_ = !!value;
}
@synthesize hasPraise;
- (BOOL) hasIsHot {
  return !!hasIsHot_;
}
- (void) setHasIsHot:(BOOL) value {
  hasIsHot_ = !!value;
}
@synthesize isHot;
- (BOOL) hasIsTop {
  return !!hasIsTop_;
}
- (void) setHasIsTop:(BOOL) value {
  hasIsTop_ = !!value;
}
@synthesize isTop;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) value {
  hasAuthor_ = !!value;
}
@synthesize author;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (void) dealloc {
  self.id = nil;
  self.tagid = nil;
  self.tag = nil;
  self.content = nil;
  self.time = nil;
  self.img = nil;
  self.author = nil;
  self.createTime = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.tagid = @"";
    self.tag = @"";
    self.content = @"";
    self.time = @"";
    self.img = @"";
    self.praiseCnt = 0;
    self.commentCnt = 0;
    self.hasPraise = 0;
    self.isHot = 0;
    self.isTop = 0;
    self.author = @"";
    self.createTime = @"";
  }
  return self;
}
static MTopic* defaultMTopicInstance = nil;
+ (void) initialize {
  if (self == [MTopic class]) {
    defaultMTopicInstance = [[MTopic alloc] init];
  }
}
+ (MTopic*) defaultInstance {
  return defaultMTopicInstance;
}
- (MTopic*) defaultInstance {
  return defaultMTopicInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTagid) {
    [output writeString:2 value:self.tagid];
  }
  if (self.hasTag) {
    [output writeString:3 value:self.tag];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasTime) {
    [output writeString:5 value:self.time];
  }
  if (self.hasImg) {
    [output writeString:6 value:self.img];
  }
  if (self.hasPraiseCnt) {
    [output writeInt32:7 value:self.praiseCnt];
  }
  if (self.hasCommentCnt) {
    [output writeInt32:8 value:self.commentCnt];
  }
  if (self.hasHasPraise) {
    [output writeInt32:9 value:self.hasPraise];
  }
  if (self.hasIsHot) {
    [output writeInt32:10 value:self.isHot];
  }
  if (self.hasIsTop) {
    [output writeInt32:11 value:self.isTop];
  }
  if (self.hasAuthor) {
    [output writeString:12 value:self.author];
  }
  if (self.hasCreateTime) {
    [output writeString:13 value:self.createTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTagid) {
    size += computeStringSize(2, self.tagid);
  }
  if (self.hasTag) {
    size += computeStringSize(3, self.tag);
  }
  if (self.hasContent) {
    size += computeStringSize(4, self.content);
  }
  if (self.hasTime) {
    size += computeStringSize(5, self.time);
  }
  if (self.hasImg) {
    size += computeStringSize(6, self.img);
  }
  if (self.hasPraiseCnt) {
    size += computeInt32Size(7, self.praiseCnt);
  }
  if (self.hasCommentCnt) {
    size += computeInt32Size(8, self.commentCnt);
  }
  if (self.hasHasPraise) {
    size += computeInt32Size(9, self.hasPraise);
  }
  if (self.hasIsHot) {
    size += computeInt32Size(10, self.isHot);
  }
  if (self.hasIsTop) {
    size += computeInt32Size(11, self.isTop);
  }
  if (self.hasAuthor) {
    size += computeStringSize(12, self.author);
  }
  if (self.hasCreateTime) {
    size += computeStringSize(13, self.createTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTopic*) parseFromData:(NSData*) data {
  return (MTopic*)[[[MTopic builder] mergeFromData:data] build];
}
+ (MTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopic*)[[[MTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTopic*) parseFromInputStream:(NSInputStream*) input {
  return (MTopic*)[[[MTopic builder] mergeFromInputStream:input] build];
}
+ (MTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopic*)[[[MTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTopic*)[[[MTopic builder] mergeFromCodedInputStream:input] build];
}
+ (MTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopic*)[[[MTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopic_Builder*) builder {
  return [[[MTopic_Builder alloc] init] autorelease];
}
+ (MTopic_Builder*) builderWithPrototype:(MTopic*) prototype {
  return [[MTopic builder] mergeFrom:prototype];
}
- (MTopic_Builder*) builder {
  return [MTopic builder];
}
@end

@interface MTopic_Builder()
@property (retain) MTopic* result;
@end

@implementation MTopic_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTopic alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTopic_Builder*) clear {
  self.result = [[[MTopic alloc] init] autorelease];
  return self;
}
- (MTopic_Builder*) clone {
  return [MTopic builderWithPrototype:result];
}
- (MTopic*) defaultInstance {
  return [MTopic defaultInstance];
}
- (MTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTopic*) buildPartial {
  MTopic* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTopic_Builder*) mergeFrom:(MTopic*) other {
  if (other == [MTopic defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTagid) {
    [self setTagid:other.tagid];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasPraiseCnt) {
    [self setPraiseCnt:other.praiseCnt];
  }
  if (other.hasCommentCnt) {
    [self setCommentCnt:other.commentCnt];
  }
  if (other.hasHasPraise) {
    [self setHasPraise:other.hasPraise];
  }
  if (other.hasIsHot) {
    [self setIsHot:other.isHot];
  }
  if (other.hasIsTop) {
    [self setIsTop:other.isTop];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTagid:[input readString]];
        break;
      }
      case 26: {
        [self setTag:[input readString]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 42: {
        [self setTime:[input readString]];
        break;
      }
      case 50: {
        [self setImg:[input readString]];
        break;
      }
      case 56: {
        [self setPraiseCnt:[input readInt32]];
        break;
      }
      case 64: {
        [self setCommentCnt:[input readInt32]];
        break;
      }
      case 72: {
        [self setHasPraise:[input readInt32]];
        break;
      }
      case 80: {
        [self setIsHot:[input readInt32]];
        break;
      }
      case 88: {
        [self setIsTop:[input readInt32]];
        break;
      }
      case 98: {
        [self setAuthor:[input readString]];
        break;
      }
      case 106: {
        [self setCreateTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MTopic_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MTopic_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTagid {
  return result.hasTagid;
}
- (NSString*) tagid {
  return result.tagid;
}
- (MTopic_Builder*) setTagid:(NSString*) value {
  result.hasTagid = YES;
  result.tagid = value;
  return self;
}
- (MTopic_Builder*) clearTagid {
  result.hasTagid = NO;
  result.tagid = @"";
  return self;
}
- (BOOL) hasTag {
  return result.hasTag;
}
- (NSString*) tag {
  return result.tag;
}
- (MTopic_Builder*) setTag:(NSString*) value {
  result.hasTag = YES;
  result.tag = value;
  return self;
}
- (MTopic_Builder*) clearTag {
  result.hasTag = NO;
  result.tag = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MTopic_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MTopic_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MTopic_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MTopic_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSString*) img {
  return result.img;
}
- (MTopic_Builder*) setImg:(NSString*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MTopic_Builder*) clearImg {
  result.hasImg = NO;
  result.img = @"";
  return self;
}
- (BOOL) hasPraiseCnt {
  return result.hasPraiseCnt;
}
- (int32_t) praiseCnt {
  return result.praiseCnt;
}
- (MTopic_Builder*) setPraiseCnt:(int32_t) value {
  result.hasPraiseCnt = YES;
  result.praiseCnt = value;
  return self;
}
- (MTopic_Builder*) clearPraiseCnt {
  result.hasPraiseCnt = NO;
  result.praiseCnt = 0;
  return self;
}
- (BOOL) hasCommentCnt {
  return result.hasCommentCnt;
}
- (int32_t) commentCnt {
  return result.commentCnt;
}
- (MTopic_Builder*) setCommentCnt:(int32_t) value {
  result.hasCommentCnt = YES;
  result.commentCnt = value;
  return self;
}
- (MTopic_Builder*) clearCommentCnt {
  result.hasCommentCnt = NO;
  result.commentCnt = 0;
  return self;
}
- (BOOL) hasHasPraise {
  return result.hasHasPraise;
}
- (int32_t) hasPraise {
  return result.hasPraise;
}
- (MTopic_Builder*) setHasPraise:(int32_t) value {
  result.hasHasPraise = YES;
  result.hasPraise = value;
  return self;
}
- (MTopic_Builder*) clearHasPraise {
  result.hasHasPraise = NO;
  result.hasPraise = 0;
  return self;
}
- (BOOL) hasIsHot {
  return result.hasIsHot;
}
- (int32_t) isHot {
  return result.isHot;
}
- (MTopic_Builder*) setIsHot:(int32_t) value {
  result.hasIsHot = YES;
  result.isHot = value;
  return self;
}
- (MTopic_Builder*) clearIsHot {
  result.hasIsHot = NO;
  result.isHot = 0;
  return self;
}
- (BOOL) hasIsTop {
  return result.hasIsTop;
}
- (int32_t) isTop {
  return result.isTop;
}
- (MTopic_Builder*) setIsTop:(int32_t) value {
  result.hasIsTop = YES;
  result.isTop = value;
  return self;
}
- (MTopic_Builder*) clearIsTop {
  result.hasIsTop = NO;
  result.isTop = 0;
  return self;
}
- (BOOL) hasAuthor {
  return result.hasAuthor;
}
- (NSString*) author {
  return result.author;
}
- (MTopic_Builder*) setAuthor:(NSString*) value {
  result.hasAuthor = YES;
  result.author = value;
  return self;
}
- (MTopic_Builder*) clearAuthor {
  result.hasAuthor = NO;
  result.author = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (NSString*) createTime {
  return result.createTime;
}
- (MTopic_Builder*) setCreateTime:(NSString*) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (MTopic_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = @"";
  return self;
}
@end

@interface MTag ()
@property (retain) NSString* id;
@property (retain) NSString* title;
@end

@implementation MTag

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (void) dealloc {
  self.id = nil;
  self.title = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.title = @"";
  }
  return self;
}
static MTag* defaultMTagInstance = nil;
+ (void) initialize {
  if (self == [MTag class]) {
    defaultMTagInstance = [[MTag alloc] init];
  }
}
+ (MTag*) defaultInstance {
  return defaultMTagInstance;
}
- (MTag*) defaultInstance {
  return defaultMTagInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTitle) {
    size += computeStringSize(2, self.title);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTag*) parseFromData:(NSData*) data {
  return (MTag*)[[[MTag builder] mergeFromData:data] build];
}
+ (MTag*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTag*)[[[MTag builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTag*) parseFromInputStream:(NSInputStream*) input {
  return (MTag*)[[[MTag builder] mergeFromInputStream:input] build];
}
+ (MTag*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTag*)[[[MTag builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTag*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTag*)[[[MTag builder] mergeFromCodedInputStream:input] build];
}
+ (MTag*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTag*)[[[MTag builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTag_Builder*) builder {
  return [[[MTag_Builder alloc] init] autorelease];
}
+ (MTag_Builder*) builderWithPrototype:(MTag*) prototype {
  return [[MTag builder] mergeFrom:prototype];
}
- (MTag_Builder*) builder {
  return [MTag builder];
}
@end

@interface MTag_Builder()
@property (retain) MTag* result;
@end

@implementation MTag_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTag alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTag_Builder*) clear {
  self.result = [[[MTag alloc] init] autorelease];
  return self;
}
- (MTag_Builder*) clone {
  return [MTag builderWithPrototype:result];
}
- (MTag*) defaultInstance {
  return [MTag defaultInstance];
}
- (MTag*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTag*) buildPartial {
  MTag* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTag_Builder*) mergeFrom:(MTag*) other {
  if (other == [MTag defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTag_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTag_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MTag_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MTag_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MTag_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MTag_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
@end

@interface MTagList ()
@property (retain) NSMutableArray* mutableTagsList;
@end

@implementation MTagList

@synthesize mutableTagsList;
- (void) dealloc {
  self.mutableTagsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MTagList* defaultMTagListInstance = nil;
+ (void) initialize {
  if (self == [MTagList class]) {
    defaultMTagListInstance = [[MTagList alloc] init];
  }
}
+ (MTagList*) defaultInstance {
  return defaultMTagListInstance;
}
- (MTagList*) defaultInstance {
  return defaultMTagListInstance;
}
- (NSArray*) tagsList {
  return mutableTagsList;
}
- (MTag*) tagsAtIndex:(int32_t) index {
  id value = [mutableTagsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MTag* element in self.tagsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MTag* element in self.tagsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTagList*) parseFromData:(NSData*) data {
  return (MTagList*)[[[MTagList builder] mergeFromData:data] build];
}
+ (MTagList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTagList*)[[[MTagList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTagList*) parseFromInputStream:(NSInputStream*) input {
  return (MTagList*)[[[MTagList builder] mergeFromInputStream:input] build];
}
+ (MTagList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTagList*)[[[MTagList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTagList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTagList*)[[[MTagList builder] mergeFromCodedInputStream:input] build];
}
+ (MTagList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTagList*)[[[MTagList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTagList_Builder*) builder {
  return [[[MTagList_Builder alloc] init] autorelease];
}
+ (MTagList_Builder*) builderWithPrototype:(MTagList*) prototype {
  return [[MTagList builder] mergeFrom:prototype];
}
- (MTagList_Builder*) builder {
  return [MTagList builder];
}
@end

@interface MTagList_Builder()
@property (retain) MTagList* result;
@end

@implementation MTagList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTagList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTagList_Builder*) clear {
  self.result = [[[MTagList alloc] init] autorelease];
  return self;
}
- (MTagList_Builder*) clone {
  return [MTagList builderWithPrototype:result];
}
- (MTagList*) defaultInstance {
  return [MTagList defaultInstance];
}
- (MTagList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTagList*) buildPartial {
  MTagList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTagList_Builder*) mergeFrom:(MTagList*) other {
  if (other == [MTagList defaultInstance]) {
    return self;
  }
  if (other.mutableTagsList.count > 0) {
    if (result.mutableTagsList == nil) {
      result.mutableTagsList = [NSMutableArray array];
    }
    [result.mutableTagsList addObjectsFromArray:other.mutableTagsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTagList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTagList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MTag_Builder* subBuilder = [MTag builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTags:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) tagsList {
  if (result.mutableTagsList == nil) { return [NSArray array]; }
  return result.mutableTagsList;
}
- (MTag*) tagsAtIndex:(int32_t) index {
  return [result tagsAtIndex:index];
}
- (MTagList_Builder*) replaceTagsAtIndex:(int32_t) index with:(MTag*) value {
  [result.mutableTagsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MTagList_Builder*) addAllTags:(NSArray*) values {
  if (result.mutableTagsList == nil) {
    result.mutableTagsList = [NSMutableArray array];
  }
  [result.mutableTagsList addObjectsFromArray:values];
  return self;
}
- (MTagList_Builder*) clearTagsList {
  result.mutableTagsList = nil;
  return self;
}
- (MTagList_Builder*) addTags:(MTag*) value {
  if (result.mutableTagsList == nil) {
    result.mutableTagsList = [NSMutableArray array];
  }
  [result.mutableTagsList addObject:value];
  return self;
}
@end

@interface MComment ()
@property (retain) NSString* id;
@property int32_t floor;
@property (retain) NSString* userid;
@property int32_t replyFloor;
@property (retain) NSString* replyid;
@property (retain) NSString* content;
@property (retain) NSString* time;
@property int32_t isLz;
@property (retain) NSString* createTime;
@end

@implementation MComment

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasFloor {
  return !!hasFloor_;
}
- (void) setHasFloor:(BOOL) value {
  hasFloor_ = !!value;
}
@synthesize floor;
- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) value {
  hasUserid_ = !!value;
}
@synthesize userid;
- (BOOL) hasReplyFloor {
  return !!hasReplyFloor_;
}
- (void) setHasReplyFloor:(BOOL) value {
  hasReplyFloor_ = !!value;
}
@synthesize replyFloor;
- (BOOL) hasReplyid {
  return !!hasReplyid_;
}
- (void) setHasReplyid:(BOOL) value {
  hasReplyid_ = !!value;
}
@synthesize replyid;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasIsLz {
  return !!hasIsLz_;
}
- (void) setHasIsLz:(BOOL) value {
  hasIsLz_ = !!value;
}
@synthesize isLz;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (void) dealloc {
  self.id = nil;
  self.userid = nil;
  self.replyid = nil;
  self.content = nil;
  self.time = nil;
  self.createTime = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.floor = 0;
    self.userid = @"";
    self.replyFloor = 0;
    self.replyid = @"";
    self.content = @"";
    self.time = @"";
    self.isLz = 0;
    self.createTime = @"";
  }
  return self;
}
static MComment* defaultMCommentInstance = nil;
+ (void) initialize {
  if (self == [MComment class]) {
    defaultMCommentInstance = [[MComment alloc] init];
  }
}
+ (MComment*) defaultInstance {
  return defaultMCommentInstance;
}
- (MComment*) defaultInstance {
  return defaultMCommentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasFloor) {
    [output writeInt32:2 value:self.floor];
  }
  if (self.hasUserid) {
    [output writeString:3 value:self.userid];
  }
  if (self.hasReplyFloor) {
    [output writeInt32:4 value:self.replyFloor];
  }
  if (self.hasReplyid) {
    [output writeString:5 value:self.replyid];
  }
  if (self.hasContent) {
    [output writeString:6 value:self.content];
  }
  if (self.hasTime) {
    [output writeString:7 value:self.time];
  }
  if (self.hasIsLz) {
    [output writeInt32:8 value:self.isLz];
  }
  if (self.hasCreateTime) {
    [output writeString:9 value:self.createTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasFloor) {
    size += computeInt32Size(2, self.floor);
  }
  if (self.hasUserid) {
    size += computeStringSize(3, self.userid);
  }
  if (self.hasReplyFloor) {
    size += computeInt32Size(4, self.replyFloor);
  }
  if (self.hasReplyid) {
    size += computeStringSize(5, self.replyid);
  }
  if (self.hasContent) {
    size += computeStringSize(6, self.content);
  }
  if (self.hasTime) {
    size += computeStringSize(7, self.time);
  }
  if (self.hasIsLz) {
    size += computeInt32Size(8, self.isLz);
  }
  if (self.hasCreateTime) {
    size += computeStringSize(9, self.createTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MComment*) parseFromData:(NSData*) data {
  return (MComment*)[[[MComment builder] mergeFromData:data] build];
}
+ (MComment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MComment*)[[[MComment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MComment*) parseFromInputStream:(NSInputStream*) input {
  return (MComment*)[[[MComment builder] mergeFromInputStream:input] build];
}
+ (MComment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MComment*)[[[MComment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MComment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MComment*)[[[MComment builder] mergeFromCodedInputStream:input] build];
}
+ (MComment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MComment*)[[[MComment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MComment_Builder*) builder {
  return [[[MComment_Builder alloc] init] autorelease];
}
+ (MComment_Builder*) builderWithPrototype:(MComment*) prototype {
  return [[MComment builder] mergeFrom:prototype];
}
- (MComment_Builder*) builder {
  return [MComment builder];
}
@end

@interface MComment_Builder()
@property (retain) MComment* result;
@end

@implementation MComment_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MComment alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MComment_Builder*) clear {
  self.result = [[[MComment alloc] init] autorelease];
  return self;
}
- (MComment_Builder*) clone {
  return [MComment builderWithPrototype:result];
}
- (MComment*) defaultInstance {
  return [MComment defaultInstance];
}
- (MComment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MComment*) buildPartial {
  MComment* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MComment_Builder*) mergeFrom:(MComment*) other {
  if (other == [MComment defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasFloor) {
    [self setFloor:other.floor];
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasReplyFloor) {
    [self setReplyFloor:other.replyFloor];
  }
  if (other.hasReplyid) {
    [self setReplyid:other.replyid];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasIsLz) {
    [self setIsLz:other.isLz];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MComment_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MComment_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 16: {
        [self setFloor:[input readInt32]];
        break;
      }
      case 26: {
        [self setUserid:[input readString]];
        break;
      }
      case 32: {
        [self setReplyFloor:[input readInt32]];
        break;
      }
      case 42: {
        [self setReplyid:[input readString]];
        break;
      }
      case 50: {
        [self setContent:[input readString]];
        break;
      }
      case 58: {
        [self setTime:[input readString]];
        break;
      }
      case 64: {
        [self setIsLz:[input readInt32]];
        break;
      }
      case 74: {
        [self setCreateTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MComment_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MComment_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasFloor {
  return result.hasFloor;
}
- (int32_t) floor {
  return result.floor;
}
- (MComment_Builder*) setFloor:(int32_t) value {
  result.hasFloor = YES;
  result.floor = value;
  return self;
}
- (MComment_Builder*) clearFloor {
  result.hasFloor = NO;
  result.floor = 0;
  return self;
}
- (BOOL) hasUserid {
  return result.hasUserid;
}
- (NSString*) userid {
  return result.userid;
}
- (MComment_Builder*) setUserid:(NSString*) value {
  result.hasUserid = YES;
  result.userid = value;
  return self;
}
- (MComment_Builder*) clearUserid {
  result.hasUserid = NO;
  result.userid = @"";
  return self;
}
- (BOOL) hasReplyFloor {
  return result.hasReplyFloor;
}
- (int32_t) replyFloor {
  return result.replyFloor;
}
- (MComment_Builder*) setReplyFloor:(int32_t) value {
  result.hasReplyFloor = YES;
  result.replyFloor = value;
  return self;
}
- (MComment_Builder*) clearReplyFloor {
  result.hasReplyFloor = NO;
  result.replyFloor = 0;
  return self;
}
- (BOOL) hasReplyid {
  return result.hasReplyid;
}
- (NSString*) replyid {
  return result.replyid;
}
- (MComment_Builder*) setReplyid:(NSString*) value {
  result.hasReplyid = YES;
  result.replyid = value;
  return self;
}
- (MComment_Builder*) clearReplyid {
  result.hasReplyid = NO;
  result.replyid = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MComment_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MComment_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MComment_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MComment_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasIsLz {
  return result.hasIsLz;
}
- (int32_t) isLz {
  return result.isLz;
}
- (MComment_Builder*) setIsLz:(int32_t) value {
  result.hasIsLz = YES;
  result.isLz = value;
  return self;
}
- (MComment_Builder*) clearIsLz {
  result.hasIsLz = NO;
  result.isLz = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (NSString*) createTime {
  return result.createTime;
}
- (MComment_Builder*) setCreateTime:(NSString*) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (MComment_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = @"";
  return self;
}
@end

@interface MCommentList ()
@property (retain) NSMutableArray* mutableCommentsList;
@end

@implementation MCommentList

@synthesize mutableCommentsList;
- (void) dealloc {
  self.mutableCommentsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MCommentList* defaultMCommentListInstance = nil;
+ (void) initialize {
  if (self == [MCommentList class]) {
    defaultMCommentListInstance = [[MCommentList alloc] init];
  }
}
+ (MCommentList*) defaultInstance {
  return defaultMCommentListInstance;
}
- (MCommentList*) defaultInstance {
  return defaultMCommentListInstance;
}
- (NSArray*) commentsList {
  return mutableCommentsList;
}
- (MComment*) commentsAtIndex:(int32_t) index {
  id value = [mutableCommentsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MComment* element in self.commentsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MComment* element in self.commentsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MCommentList*) parseFromData:(NSData*) data {
  return (MCommentList*)[[[MCommentList builder] mergeFromData:data] build];
}
+ (MCommentList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCommentList*)[[[MCommentList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MCommentList*) parseFromInputStream:(NSInputStream*) input {
  return (MCommentList*)[[[MCommentList builder] mergeFromInputStream:input] build];
}
+ (MCommentList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCommentList*)[[[MCommentList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCommentList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MCommentList*)[[[MCommentList builder] mergeFromCodedInputStream:input] build];
}
+ (MCommentList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MCommentList*)[[[MCommentList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MCommentList_Builder*) builder {
  return [[[MCommentList_Builder alloc] init] autorelease];
}
+ (MCommentList_Builder*) builderWithPrototype:(MCommentList*) prototype {
  return [[MCommentList builder] mergeFrom:prototype];
}
- (MCommentList_Builder*) builder {
  return [MCommentList builder];
}
@end

@interface MCommentList_Builder()
@property (retain) MCommentList* result;
@end

@implementation MCommentList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MCommentList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MCommentList_Builder*) clear {
  self.result = [[[MCommentList alloc] init] autorelease];
  return self;
}
- (MCommentList_Builder*) clone {
  return [MCommentList builderWithPrototype:result];
}
- (MCommentList*) defaultInstance {
  return [MCommentList defaultInstance];
}
- (MCommentList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MCommentList*) buildPartial {
  MCommentList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MCommentList_Builder*) mergeFrom:(MCommentList*) other {
  if (other == [MCommentList defaultInstance]) {
    return self;
  }
  if (other.mutableCommentsList.count > 0) {
    if (result.mutableCommentsList == nil) {
      result.mutableCommentsList = [NSMutableArray array];
    }
    [result.mutableCommentsList addObjectsFromArray:other.mutableCommentsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MCommentList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MCommentList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MComment_Builder* subBuilder = [MComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComments:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) commentsList {
  if (result.mutableCommentsList == nil) { return [NSArray array]; }
  return result.mutableCommentsList;
}
- (MComment*) commentsAtIndex:(int32_t) index {
  return [result commentsAtIndex:index];
}
- (MCommentList_Builder*) replaceCommentsAtIndex:(int32_t) index with:(MComment*) value {
  [result.mutableCommentsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MCommentList_Builder*) addAllComments:(NSArray*) values {
  if (result.mutableCommentsList == nil) {
    result.mutableCommentsList = [NSMutableArray array];
  }
  [result.mutableCommentsList addObjectsFromArray:values];
  return self;
}
- (MCommentList_Builder*) clearCommentsList {
  result.mutableCommentsList = nil;
  return self;
}
- (MCommentList_Builder*) addComments:(MComment*) value {
  if (result.mutableCommentsList == nil) {
    result.mutableCommentsList = [NSMutableArray array];
  }
  [result.mutableCommentsList addObject:value];
  return self;
}
@end

@interface MAddTopic ()
@property (retain) NSString* tagId;
@property (retain) NSString* content;
@property (retain) NSData* img;
@end

@implementation MAddTopic

- (BOOL) hasTagId {
  return !!hasTagId_;
}
- (void) setHasTagId:(BOOL) value {
  hasTagId_ = !!value;
}
@synthesize tagId;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.tagId = nil;
  self.content = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tagId = @"";
    self.content = @"";
    self.img = [NSData data];
  }
  return self;
}
static MAddTopic* defaultMAddTopicInstance = nil;
+ (void) initialize {
  if (self == [MAddTopic class]) {
    defaultMAddTopicInstance = [[MAddTopic alloc] init];
  }
}
+ (MAddTopic*) defaultInstance {
  return defaultMAddTopicInstance;
}
- (MAddTopic*) defaultInstance {
  return defaultMAddTopicInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTagId) {
    [output writeString:1 value:self.tagId];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  if (self.hasImg) {
    [output writeData:3 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTagId) {
    size += computeStringSize(1, self.tagId);
  }
  if (self.hasContent) {
    size += computeStringSize(2, self.content);
  }
  if (self.hasImg) {
    size += computeDataSize(3, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MAddTopic*) parseFromData:(NSData*) data {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromData:data] build];
}
+ (MAddTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MAddTopic*) parseFromInputStream:(NSInputStream*) input {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromInputStream:input] build];
}
+ (MAddTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MAddTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromCodedInputStream:input] build];
}
+ (MAddTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MAddTopic_Builder*) builder {
  return [[[MAddTopic_Builder alloc] init] autorelease];
}
+ (MAddTopic_Builder*) builderWithPrototype:(MAddTopic*) prototype {
  return [[MAddTopic builder] mergeFrom:prototype];
}
- (MAddTopic_Builder*) builder {
  return [MAddTopic builder];
}
@end

@interface MAddTopic_Builder()
@property (retain) MAddTopic* result;
@end

@implementation MAddTopic_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MAddTopic alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MAddTopic_Builder*) clear {
  self.result = [[[MAddTopic alloc] init] autorelease];
  return self;
}
- (MAddTopic_Builder*) clone {
  return [MAddTopic builderWithPrototype:result];
}
- (MAddTopic*) defaultInstance {
  return [MAddTopic defaultInstance];
}
- (MAddTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MAddTopic*) buildPartial {
  MAddTopic* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MAddTopic_Builder*) mergeFrom:(MAddTopic*) other {
  if (other == [MAddTopic defaultInstance]) {
    return self;
  }
  if (other.hasTagId) {
    [self setTagId:other.tagId];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MAddTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MAddTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTagId:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 26: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasTagId {
  return result.hasTagId;
}
- (NSString*) tagId {
  return result.tagId;
}
- (MAddTopic_Builder*) setTagId:(NSString*) value {
  result.hasTagId = YES;
  result.tagId = value;
  return self;
}
- (MAddTopic_Builder*) clearTagId {
  result.hasTagId = NO;
  result.tagId = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MAddTopic_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MAddTopic_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MAddTopic_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MAddTopic_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MMsgCount ()
@property int32_t comment;
@property int32_t chat;
@end

@implementation MMsgCount

- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (BOOL) hasChat {
  return !!hasChat_;
}
- (void) setHasChat:(BOOL) value {
  hasChat_ = !!value;
}
@synthesize chat;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.comment = 0;
    self.chat = 0;
  }
  return self;
}
static MMsgCount* defaultMMsgCountInstance = nil;
+ (void) initialize {
  if (self == [MMsgCount class]) {
    defaultMMsgCountInstance = [[MMsgCount alloc] init];
  }
}
+ (MMsgCount*) defaultInstance {
  return defaultMMsgCountInstance;
}
- (MMsgCount*) defaultInstance {
  return defaultMMsgCountInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasComment) {
    [output writeInt32:1 value:self.comment];
  }
  if (self.hasChat) {
    [output writeInt32:2 value:self.chat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasComment) {
    size += computeInt32Size(1, self.comment);
  }
  if (self.hasChat) {
    size += computeInt32Size(2, self.chat);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MMsgCount*) parseFromData:(NSData*) data {
  return (MMsgCount*)[[[MMsgCount builder] mergeFromData:data] build];
}
+ (MMsgCount*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMsgCount*)[[[MMsgCount builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MMsgCount*) parseFromInputStream:(NSInputStream*) input {
  return (MMsgCount*)[[[MMsgCount builder] mergeFromInputStream:input] build];
}
+ (MMsgCount*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMsgCount*)[[[MMsgCount builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMsgCount*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MMsgCount*)[[[MMsgCount builder] mergeFromCodedInputStream:input] build];
}
+ (MMsgCount*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMsgCount*)[[[MMsgCount builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMsgCount_Builder*) builder {
  return [[[MMsgCount_Builder alloc] init] autorelease];
}
+ (MMsgCount_Builder*) builderWithPrototype:(MMsgCount*) prototype {
  return [[MMsgCount builder] mergeFrom:prototype];
}
- (MMsgCount_Builder*) builder {
  return [MMsgCount builder];
}
@end

@interface MMsgCount_Builder()
@property (retain) MMsgCount* result;
@end

@implementation MMsgCount_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MMsgCount alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MMsgCount_Builder*) clear {
  self.result = [[[MMsgCount alloc] init] autorelease];
  return self;
}
- (MMsgCount_Builder*) clone {
  return [MMsgCount builderWithPrototype:result];
}
- (MMsgCount*) defaultInstance {
  return [MMsgCount defaultInstance];
}
- (MMsgCount*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MMsgCount*) buildPartial {
  MMsgCount* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MMsgCount_Builder*) mergeFrom:(MMsgCount*) other {
  if (other == [MMsgCount defaultInstance]) {
    return self;
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasChat) {
    [self setChat:other.chat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MMsgCount_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MMsgCount_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setComment:[input readInt32]];
        break;
      }
      case 16: {
        [self setChat:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (int32_t) comment {
  return result.comment;
}
- (MMsgCount_Builder*) setComment:(int32_t) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (MMsgCount_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = 0;
  return self;
}
- (BOOL) hasChat {
  return result.hasChat;
}
- (int32_t) chat {
  return result.chat;
}
- (MMsgCount_Builder*) setChat:(int32_t) value {
  result.hasChat = YES;
  result.chat = value;
  return self;
}
- (MMsgCount_Builder*) clearChat {
  result.hasChat = NO;
  result.chat = 0;
  return self;
}
@end

@interface MTopicMini ()
@property (retain) NSString* id;
@property (retain) NSString* tag;
@property (retain) NSString* content;
@property int32_t unreadCnt;
@property (retain) NSString* createTime;
@end

@implementation MTopicMini

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value {
  hasTag_ = !!value;
}
@synthesize tag;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasUnreadCnt {
  return !!hasUnreadCnt_;
}
- (void) setHasUnreadCnt:(BOOL) value {
  hasUnreadCnt_ = !!value;
}
@synthesize unreadCnt;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (void) dealloc {
  self.id = nil;
  self.tag = nil;
  self.content = nil;
  self.createTime = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.tag = @"";
    self.content = @"";
    self.unreadCnt = 0;
    self.createTime = @"";
  }
  return self;
}
static MTopicMini* defaultMTopicMiniInstance = nil;
+ (void) initialize {
  if (self == [MTopicMini class]) {
    defaultMTopicMiniInstance = [[MTopicMini alloc] init];
  }
}
+ (MTopicMini*) defaultInstance {
  return defaultMTopicMiniInstance;
}
- (MTopicMini*) defaultInstance {
  return defaultMTopicMiniInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTag) {
    [output writeString:2 value:self.tag];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  if (self.hasUnreadCnt) {
    [output writeInt32:4 value:self.unreadCnt];
  }
  if (self.hasCreateTime) {
    [output writeString:5 value:self.createTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTag) {
    size += computeStringSize(2, self.tag);
  }
  if (self.hasContent) {
    size += computeStringSize(3, self.content);
  }
  if (self.hasUnreadCnt) {
    size += computeInt32Size(4, self.unreadCnt);
  }
  if (self.hasCreateTime) {
    size += computeStringSize(5, self.createTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTopicMini*) parseFromData:(NSData*) data {
  return (MTopicMini*)[[[MTopicMini builder] mergeFromData:data] build];
}
+ (MTopicMini*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopicMini*)[[[MTopicMini builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTopicMini*) parseFromInputStream:(NSInputStream*) input {
  return (MTopicMini*)[[[MTopicMini builder] mergeFromInputStream:input] build];
}
+ (MTopicMini*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopicMini*)[[[MTopicMini builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopicMini*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTopicMini*)[[[MTopicMini builder] mergeFromCodedInputStream:input] build];
}
+ (MTopicMini*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopicMini*)[[[MTopicMini builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopicMini_Builder*) builder {
  return [[[MTopicMini_Builder alloc] init] autorelease];
}
+ (MTopicMini_Builder*) builderWithPrototype:(MTopicMini*) prototype {
  return [[MTopicMini builder] mergeFrom:prototype];
}
- (MTopicMini_Builder*) builder {
  return [MTopicMini builder];
}
@end

@interface MTopicMini_Builder()
@property (retain) MTopicMini* result;
@end

@implementation MTopicMini_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTopicMini alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTopicMini_Builder*) clear {
  self.result = [[[MTopicMini alloc] init] autorelease];
  return self;
}
- (MTopicMini_Builder*) clone {
  return [MTopicMini builderWithPrototype:result];
}
- (MTopicMini*) defaultInstance {
  return [MTopicMini defaultInstance];
}
- (MTopicMini*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTopicMini*) buildPartial {
  MTopicMini* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTopicMini_Builder*) mergeFrom:(MTopicMini*) other {
  if (other == [MTopicMini defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasUnreadCnt) {
    [self setUnreadCnt:other.unreadCnt];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTopicMini_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTopicMini_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTag:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
      case 32: {
        [self setUnreadCnt:[input readInt32]];
        break;
      }
      case 42: {
        [self setCreateTime:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MTopicMini_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MTopicMini_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTag {
  return result.hasTag;
}
- (NSString*) tag {
  return result.tag;
}
- (MTopicMini_Builder*) setTag:(NSString*) value {
  result.hasTag = YES;
  result.tag = value;
  return self;
}
- (MTopicMini_Builder*) clearTag {
  result.hasTag = NO;
  result.tag = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MTopicMini_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MTopicMini_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasUnreadCnt {
  return result.hasUnreadCnt;
}
- (int32_t) unreadCnt {
  return result.unreadCnt;
}
- (MTopicMini_Builder*) setUnreadCnt:(int32_t) value {
  result.hasUnreadCnt = YES;
  result.unreadCnt = value;
  return self;
}
- (MTopicMini_Builder*) clearUnreadCnt {
  result.hasUnreadCnt = NO;
  result.unreadCnt = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (NSString*) createTime {
  return result.createTime;
}
- (MTopicMini_Builder*) setCreateTime:(NSString*) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (MTopicMini_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = @"";
  return self;
}
@end

@interface MTopicMiniList ()
@property (retain) NSMutableArray* mutableTopicsList;
@end

@implementation MTopicMiniList

@synthesize mutableTopicsList;
- (void) dealloc {
  self.mutableTopicsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MTopicMiniList* defaultMTopicMiniListInstance = nil;
+ (void) initialize {
  if (self == [MTopicMiniList class]) {
    defaultMTopicMiniListInstance = [[MTopicMiniList alloc] init];
  }
}
+ (MTopicMiniList*) defaultInstance {
  return defaultMTopicMiniListInstance;
}
- (MTopicMiniList*) defaultInstance {
  return defaultMTopicMiniListInstance;
}
- (NSArray*) topicsList {
  return mutableTopicsList;
}
- (MTopicMini*) topicsAtIndex:(int32_t) index {
  id value = [mutableTopicsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MTopicMini* element in self.topicsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MTopicMini* element in self.topicsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTopicMiniList*) parseFromData:(NSData*) data {
  return (MTopicMiniList*)[[[MTopicMiniList builder] mergeFromData:data] build];
}
+ (MTopicMiniList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopicMiniList*)[[[MTopicMiniList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTopicMiniList*) parseFromInputStream:(NSInputStream*) input {
  return (MTopicMiniList*)[[[MTopicMiniList builder] mergeFromInputStream:input] build];
}
+ (MTopicMiniList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopicMiniList*)[[[MTopicMiniList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopicMiniList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTopicMiniList*)[[[MTopicMiniList builder] mergeFromCodedInputStream:input] build];
}
+ (MTopicMiniList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopicMiniList*)[[[MTopicMiniList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopicMiniList_Builder*) builder {
  return [[[MTopicMiniList_Builder alloc] init] autorelease];
}
+ (MTopicMiniList_Builder*) builderWithPrototype:(MTopicMiniList*) prototype {
  return [[MTopicMiniList builder] mergeFrom:prototype];
}
- (MTopicMiniList_Builder*) builder {
  return [MTopicMiniList builder];
}
@end

@interface MTopicMiniList_Builder()
@property (retain) MTopicMiniList* result;
@end

@implementation MTopicMiniList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTopicMiniList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTopicMiniList_Builder*) clear {
  self.result = [[[MTopicMiniList alloc] init] autorelease];
  return self;
}
- (MTopicMiniList_Builder*) clone {
  return [MTopicMiniList builderWithPrototype:result];
}
- (MTopicMiniList*) defaultInstance {
  return [MTopicMiniList defaultInstance];
}
- (MTopicMiniList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTopicMiniList*) buildPartial {
  MTopicMiniList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTopicMiniList_Builder*) mergeFrom:(MTopicMiniList*) other {
  if (other == [MTopicMiniList defaultInstance]) {
    return self;
  }
  if (other.mutableTopicsList.count > 0) {
    if (result.mutableTopicsList == nil) {
      result.mutableTopicsList = [NSMutableArray array];
    }
    [result.mutableTopicsList addObjectsFromArray:other.mutableTopicsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTopicMiniList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTopicMiniList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MTopicMini_Builder* subBuilder = [MTopicMini builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTopics:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) topicsList {
  if (result.mutableTopicsList == nil) { return [NSArray array]; }
  return result.mutableTopicsList;
}
- (MTopicMini*) topicsAtIndex:(int32_t) index {
  return [result topicsAtIndex:index];
}
- (MTopicMiniList_Builder*) replaceTopicsAtIndex:(int32_t) index with:(MTopicMini*) value {
  [result.mutableTopicsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MTopicMiniList_Builder*) addAllTopics:(NSArray*) values {
  if (result.mutableTopicsList == nil) {
    result.mutableTopicsList = [NSMutableArray array];
  }
  [result.mutableTopicsList addObjectsFromArray:values];
  return self;
}
- (MTopicMiniList_Builder*) clearTopicsList {
  result.mutableTopicsList = nil;
  return self;
}
- (MTopicMiniList_Builder*) addTopics:(MTopicMini*) value {
  if (result.mutableTopicsList == nil) {
    result.mutableTopicsList = [NSMutableArray array];
  }
  [result.mutableTopicsList addObject:value];
  return self;
}
@end

