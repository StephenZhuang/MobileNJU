// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndTreehole.pb.h"

@implementation ZsndTreeholeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndTreeholeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MTreeHole ()
@property (retain) NSMutableArray* mutableTopicsList;
@end

@implementation MTreeHole

@synthesize mutableTopicsList;
- (void) dealloc {
  self.mutableTopicsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MTreeHole* defaultMTreeHoleInstance = nil;
+ (void) initialize {
  if (self == [MTreeHole class]) {
    defaultMTreeHoleInstance = [[MTreeHole alloc] init];
  }
}
+ (MTreeHole*) defaultInstance {
  return defaultMTreeHoleInstance;
}
- (MTreeHole*) defaultInstance {
  return defaultMTreeHoleInstance;
}
- (NSArray*) topicsList {
  return mutableTopicsList;
}
- (MTopic*) topicsAtIndex:(int32_t) index {
  id value = [mutableTopicsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MTopic* element in self.topicsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MTopic* element in self.topicsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTreeHole*) parseFromData:(NSData*) data {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromData:data] build];
}
+ (MTreeHole*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTreeHole*) parseFromInputStream:(NSInputStream*) input {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromInputStream:input] build];
}
+ (MTreeHole*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTreeHole*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromCodedInputStream:input] build];
}
+ (MTreeHole*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTreeHole*)[[[MTreeHole builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTreeHole_Builder*) builder {
  return [[[MTreeHole_Builder alloc] init] autorelease];
}
+ (MTreeHole_Builder*) builderWithPrototype:(MTreeHole*) prototype {
  return [[MTreeHole builder] mergeFrom:prototype];
}
- (MTreeHole_Builder*) builder {
  return [MTreeHole builder];
}
@end

@interface MTreeHole_Builder()
@property (retain) MTreeHole* result;
@end

@implementation MTreeHole_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTreeHole alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTreeHole_Builder*) clear {
  self.result = [[[MTreeHole alloc] init] autorelease];
  return self;
}
- (MTreeHole_Builder*) clone {
  return [MTreeHole builderWithPrototype:result];
}
- (MTreeHole*) defaultInstance {
  return [MTreeHole defaultInstance];
}
- (MTreeHole*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTreeHole*) buildPartial {
  MTreeHole* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTreeHole_Builder*) mergeFrom:(MTreeHole*) other {
  if (other == [MTreeHole defaultInstance]) {
    return self;
  }
  if (other.mutableTopicsList.count > 0) {
    if (result.mutableTopicsList == nil) {
      result.mutableTopicsList = [NSMutableArray array];
    }
    [result.mutableTopicsList addObjectsFromArray:other.mutableTopicsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTreeHole_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTreeHole_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MTopic_Builder* subBuilder = [MTopic builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTopics:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) topicsList {
  if (result.mutableTopicsList == nil) { return [NSArray array]; }
  return result.mutableTopicsList;
}
- (MTopic*) topicsAtIndex:(int32_t) index {
  return [result topicsAtIndex:index];
}
- (MTreeHole_Builder*) replaceTopicsAtIndex:(int32_t) index with:(MTopic*) value {
  [result.mutableTopicsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MTreeHole_Builder*) addAllTopics:(NSArray*) values {
  if (result.mutableTopicsList == nil) {
    result.mutableTopicsList = [NSMutableArray array];
  }
  [result.mutableTopicsList addObjectsFromArray:values];
  return self;
}
- (MTreeHole_Builder*) clearTopicsList {
  result.mutableTopicsList = nil;
  return self;
}
- (MTreeHole_Builder*) addTopics:(MTopic*) value {
  if (result.mutableTopicsList == nil) {
    result.mutableTopicsList = [NSMutableArray array];
  }
  [result.mutableTopicsList addObject:value];
  return self;
}
@end

@interface MTopic ()
@property (retain) NSString* id;
@property (retain) NSString* title;
@property (retain) NSString* content;
@property (retain) NSString* time;
@property (retain) NSString* imgs;
@property int32_t praiseCnt;
@property int32_t commentCnt;
@property int32_t hasPraise;
@property (retain) NSMutableArray* mutableCommentList;
@property (retain) NSString* createTime;
@property (retain) NSString* author;
@end

@implementation MTopic

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasImgs {
  return !!hasImgs_;
}
- (void) setHasImgs:(BOOL) value {
  hasImgs_ = !!value;
}
@synthesize imgs;
- (BOOL) hasPraiseCnt {
  return !!hasPraiseCnt_;
}
- (void) setHasPraiseCnt:(BOOL) value {
  hasPraiseCnt_ = !!value;
}
@synthesize praiseCnt;
- (BOOL) hasCommentCnt {
  return !!hasCommentCnt_;
}
- (void) setHasCommentCnt:(BOOL) value {
  hasCommentCnt_ = !!value;
}
@synthesize commentCnt;
- (BOOL) hasHasPraise {
  return !!hasHasPraise_;
}
- (void) setHasHasPraise:(BOOL) value {
  hasHasPraise_ = !!value;
}
@synthesize hasPraise;
@synthesize mutableCommentList;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value {
  hasCreateTime_ = !!value;
}
@synthesize createTime;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) value {
  hasAuthor_ = !!value;
}
@synthesize author;
- (void) dealloc {
  self.id = nil;
  self.title = nil;
  self.content = nil;
  self.time = nil;
  self.imgs = nil;
  self.mutableCommentList = nil;
  self.createTime = nil;
  self.author = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.title = @"";
    self.content = @"";
    self.time = @"";
    self.imgs = @"";
    self.praiseCnt = 0;
    self.commentCnt = 0;
    self.hasPraise = 0;
    self.createTime = @"";
    self.author = @"";
  }
  return self;
}
static MTopic* defaultMTopicInstance = nil;
+ (void) initialize {
  if (self == [MTopic class]) {
    defaultMTopicInstance = [[MTopic alloc] init];
  }
}
+ (MTopic*) defaultInstance {
  return defaultMTopicInstance;
}
- (MTopic*) defaultInstance {
  return defaultMTopicInstance;
}
- (NSArray*) commentList {
  return mutableCommentList;
}
- (MComment*) commentAtIndex:(int32_t) index {
  id value = [mutableCommentList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  if (self.hasTime) {
    [output writeString:4 value:self.time];
  }
  if (self.hasImgs) {
    [output writeString:5 value:self.imgs];
  }
  if (self.hasPraiseCnt) {
    [output writeInt32:6 value:self.praiseCnt];
  }
  if (self.hasCommentCnt) {
    [output writeInt32:7 value:self.commentCnt];
  }
  if (self.hasHasPraise) {
    [output writeInt32:8 value:self.hasPraise];
  }
  for (MComment* element in self.commentList) {
    [output writeMessage:9 value:element];
  }
  if (self.hasCreateTime) {
    [output writeString:10 value:self.createTime];
  }
  if (self.hasAuthor) {
    [output writeString:11 value:self.author];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTitle) {
    size += computeStringSize(2, self.title);
  }
  if (self.hasContent) {
    size += computeStringSize(3, self.content);
  }
  if (self.hasTime) {
    size += computeStringSize(4, self.time);
  }
  if (self.hasImgs) {
    size += computeStringSize(5, self.imgs);
  }
  if (self.hasPraiseCnt) {
    size += computeInt32Size(6, self.praiseCnt);
  }
  if (self.hasCommentCnt) {
    size += computeInt32Size(7, self.commentCnt);
  }
  if (self.hasHasPraise) {
    size += computeInt32Size(8, self.hasPraise);
  }
  for (MComment* element in self.commentList) {
    size += computeMessageSize(9, element);
  }
  if (self.hasCreateTime) {
    size += computeStringSize(10, self.createTime);
  }
  if (self.hasAuthor) {
    size += computeStringSize(11, self.author);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MTopic*) parseFromData:(NSData*) data {
  return (MTopic*)[[[MTopic builder] mergeFromData:data] build];
}
+ (MTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopic*)[[[MTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MTopic*) parseFromInputStream:(NSInputStream*) input {
  return (MTopic*)[[[MTopic builder] mergeFromInputStream:input] build];
}
+ (MTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopic*)[[[MTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MTopic*)[[[MTopic builder] mergeFromCodedInputStream:input] build];
}
+ (MTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MTopic*)[[[MTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MTopic_Builder*) builder {
  return [[[MTopic_Builder alloc] init] autorelease];
}
+ (MTopic_Builder*) builderWithPrototype:(MTopic*) prototype {
  return [[MTopic builder] mergeFrom:prototype];
}
- (MTopic_Builder*) builder {
  return [MTopic builder];
}
@end

@interface MTopic_Builder()
@property (retain) MTopic* result;
@end

@implementation MTopic_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MTopic alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MTopic_Builder*) clear {
  self.result = [[[MTopic alloc] init] autorelease];
  return self;
}
- (MTopic_Builder*) clone {
  return [MTopic builderWithPrototype:result];
}
- (MTopic*) defaultInstance {
  return [MTopic defaultInstance];
}
- (MTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MTopic*) buildPartial {
  MTopic* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MTopic_Builder*) mergeFrom:(MTopic*) other {
  if (other == [MTopic defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasImgs) {
    [self setImgs:other.imgs];
  }
  if (other.hasPraiseCnt) {
    [self setPraiseCnt:other.praiseCnt];
  }
  if (other.hasCommentCnt) {
    [self setCommentCnt:other.commentCnt];
  }
  if (other.hasHasPraise) {
    [self setHasPraise:other.hasPraise];
  }
  if (other.mutableCommentList.count > 0) {
    if (result.mutableCommentList == nil) {
      result.mutableCommentList = [NSMutableArray array];
    }
    [result.mutableCommentList addObjectsFromArray:other.mutableCommentList];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
      case 34: {
        [self setTime:[input readString]];
        break;
      }
      case 42: {
        [self setImgs:[input readString]];
        break;
      }
      case 48: {
        [self setPraiseCnt:[input readInt32]];
        break;
      }
      case 56: {
        [self setCommentCnt:[input readInt32]];
        break;
      }
      case 64: {
        [self setHasPraise:[input readInt32]];
        break;
      }
      case 74: {
        MComment_Builder* subBuilder = [MComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComment:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        [self setCreateTime:[input readString]];
        break;
      }
      case 90: {
        [self setAuthor:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MTopic_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MTopic_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MTopic_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MTopic_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MTopic_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MTopic_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MTopic_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MTopic_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasImgs {
  return result.hasImgs;
}
- (NSString*) imgs {
  return result.imgs;
}
- (MTopic_Builder*) setImgs:(NSString*) value {
  result.hasImgs = YES;
  result.imgs = value;
  return self;
}
- (MTopic_Builder*) clearImgs {
  result.hasImgs = NO;
  result.imgs = @"";
  return self;
}
- (BOOL) hasPraiseCnt {
  return result.hasPraiseCnt;
}
- (int32_t) praiseCnt {
  return result.praiseCnt;
}
- (MTopic_Builder*) setPraiseCnt:(int32_t) value {
  result.hasPraiseCnt = YES;
  result.praiseCnt = value;
  return self;
}
- (MTopic_Builder*) clearPraiseCnt {
  result.hasPraiseCnt = NO;
  result.praiseCnt = 0;
  return self;
}
- (BOOL) hasCommentCnt {
  return result.hasCommentCnt;
}
- (int32_t) commentCnt {
  return result.commentCnt;
}
- (MTopic_Builder*) setCommentCnt:(int32_t) value {
  result.hasCommentCnt = YES;
  result.commentCnt = value;
  return self;
}
- (MTopic_Builder*) clearCommentCnt {
  result.hasCommentCnt = NO;
  result.commentCnt = 0;
  return self;
}
- (BOOL) hasHasPraise {
  return result.hasHasPraise;
}
- (int32_t) hasPraise {
  return result.hasPraise;
}
- (MTopic_Builder*) setHasPraise:(int32_t) value {
  result.hasHasPraise = YES;
  result.hasPraise = value;
  return self;
}
- (MTopic_Builder*) clearHasPraise {
  result.hasHasPraise = NO;
  result.hasPraise = 0;
  return self;
}
- (NSArray*) commentList {
  if (result.mutableCommentList == nil) { return [NSArray array]; }
  return result.mutableCommentList;
}
- (MComment*) commentAtIndex:(int32_t) index {
  return [result commentAtIndex:index];
}
- (MTopic_Builder*) replaceCommentAtIndex:(int32_t) index with:(MComment*) value {
  [result.mutableCommentList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MTopic_Builder*) addAllComment:(NSArray*) values {
  if (result.mutableCommentList == nil) {
    result.mutableCommentList = [NSMutableArray array];
  }
  [result.mutableCommentList addObjectsFromArray:values];
  return self;
}
- (MTopic_Builder*) clearCommentList {
  result.mutableCommentList = nil;
  return self;
}
- (MTopic_Builder*) addComment:(MComment*) value {
  if (result.mutableCommentList == nil) {
    result.mutableCommentList = [NSMutableArray array];
  }
  [result.mutableCommentList addObject:value];
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (NSString*) createTime {
  return result.createTime;
}
- (MTopic_Builder*) setCreateTime:(NSString*) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (MTopic_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = @"";
  return self;
}
- (BOOL) hasAuthor {
  return result.hasAuthor;
}
- (NSString*) author {
  return result.author;
}
- (MTopic_Builder*) setAuthor:(NSString*) value {
  result.hasAuthor = YES;
  result.author = value;
  return self;
}
- (MTopic_Builder*) clearAuthor {
  result.hasAuthor = NO;
  result.author = @"";
  return self;
}
@end

@interface MComment ()
@property (retain) NSString* id;
@property (retain) NSString* userid1;
@property (retain) NSString* nickname1;
@property (retain) NSString* userid2;
@property (retain) NSString* nickname2;
@property (retain) NSString* content;
@property (retain) NSString* time;
@property (retain) NSString* pid;
@property (retain) NSString* title;
@property (retain) NSString* author;
@end

@implementation MComment

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasUserid1 {
  return !!hasUserid1_;
}
- (void) setHasUserid1:(BOOL) value {
  hasUserid1_ = !!value;
}
@synthesize userid1;
- (BOOL) hasNickname1 {
  return !!hasNickname1_;
}
- (void) setHasNickname1:(BOOL) value {
  hasNickname1_ = !!value;
}
@synthesize nickname1;
- (BOOL) hasUserid2 {
  return !!hasUserid2_;
}
- (void) setHasUserid2:(BOOL) value {
  hasUserid2_ = !!value;
}
@synthesize userid2;
- (BOOL) hasNickname2 {
  return !!hasNickname2_;
}
- (void) setHasNickname2:(BOOL) value {
  hasNickname2_ = !!value;
}
@synthesize nickname2;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) value {
  hasPid_ = !!value;
}
@synthesize pid;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) value {
  hasAuthor_ = !!value;
}
@synthesize author;
- (void) dealloc {
  self.id = nil;
  self.userid1 = nil;
  self.nickname1 = nil;
  self.userid2 = nil;
  self.nickname2 = nil;
  self.content = nil;
  self.time = nil;
  self.pid = nil;
  self.title = nil;
  self.author = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.userid1 = @"";
    self.nickname1 = @"";
    self.userid2 = @"";
    self.nickname2 = @"";
    self.content = @"";
    self.time = @"";
    self.pid = @"";
    self.title = @"";
    self.author = @"";
  }
  return self;
}
static MComment* defaultMCommentInstance = nil;
+ (void) initialize {
  if (self == [MComment class]) {
    defaultMCommentInstance = [[MComment alloc] init];
  }
}
+ (MComment*) defaultInstance {
  return defaultMCommentInstance;
}
- (MComment*) defaultInstance {
  return defaultMCommentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasUserid1) {
    [output writeString:2 value:self.userid1];
  }
  if (self.hasNickname1) {
    [output writeString:3 value:self.nickname1];
  }
  if (self.hasUserid2) {
    [output writeString:4 value:self.userid2];
  }
  if (self.hasNickname2) {
    [output writeString:5 value:self.nickname2];
  }
  if (self.hasContent) {
    [output writeString:6 value:self.content];
  }
  if (self.hasTime) {
    [output writeString:7 value:self.time];
  }
  if (self.hasPid) {
    [output writeString:8 value:self.pid];
  }
  if (self.hasTitle) {
    [output writeString:9 value:self.title];
  }
  if (self.hasAuthor) {
    [output writeString:10 value:self.author];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasUserid1) {
    size += computeStringSize(2, self.userid1);
  }
  if (self.hasNickname1) {
    size += computeStringSize(3, self.nickname1);
  }
  if (self.hasUserid2) {
    size += computeStringSize(4, self.userid2);
  }
  if (self.hasNickname2) {
    size += computeStringSize(5, self.nickname2);
  }
  if (self.hasContent) {
    size += computeStringSize(6, self.content);
  }
  if (self.hasTime) {
    size += computeStringSize(7, self.time);
  }
  if (self.hasPid) {
    size += computeStringSize(8, self.pid);
  }
  if (self.hasTitle) {
    size += computeStringSize(9, self.title);
  }
  if (self.hasAuthor) {
    size += computeStringSize(10, self.author);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MComment*) parseFromData:(NSData*) data {
  return (MComment*)[[[MComment builder] mergeFromData:data] build];
}
+ (MComment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MComment*)[[[MComment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MComment*) parseFromInputStream:(NSInputStream*) input {
  return (MComment*)[[[MComment builder] mergeFromInputStream:input] build];
}
+ (MComment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MComment*)[[[MComment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MComment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MComment*)[[[MComment builder] mergeFromCodedInputStream:input] build];
}
+ (MComment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MComment*)[[[MComment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MComment_Builder*) builder {
  return [[[MComment_Builder alloc] init] autorelease];
}
+ (MComment_Builder*) builderWithPrototype:(MComment*) prototype {
  return [[MComment builder] mergeFrom:prototype];
}
- (MComment_Builder*) builder {
  return [MComment builder];
}
@end

@interface MComment_Builder()
@property (retain) MComment* result;
@end

@implementation MComment_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MComment alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MComment_Builder*) clear {
  self.result = [[[MComment alloc] init] autorelease];
  return self;
}
- (MComment_Builder*) clone {
  return [MComment builderWithPrototype:result];
}
- (MComment*) defaultInstance {
  return [MComment defaultInstance];
}
- (MComment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MComment*) buildPartial {
  MComment* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MComment_Builder*) mergeFrom:(MComment*) other {
  if (other == [MComment defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUserid1) {
    [self setUserid1:other.userid1];
  }
  if (other.hasNickname1) {
    [self setNickname1:other.nickname1];
  }
  if (other.hasUserid2) {
    [self setUserid2:other.userid2];
  }
  if (other.hasNickname2) {
    [self setNickname2:other.nickname2];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MComment_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MComment_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setUserid1:[input readString]];
        break;
      }
      case 26: {
        [self setNickname1:[input readString]];
        break;
      }
      case 34: {
        [self setUserid2:[input readString]];
        break;
      }
      case 42: {
        [self setNickname2:[input readString]];
        break;
      }
      case 50: {
        [self setContent:[input readString]];
        break;
      }
      case 58: {
        [self setTime:[input readString]];
        break;
      }
      case 66: {
        [self setPid:[input readString]];
        break;
      }
      case 74: {
        [self setTitle:[input readString]];
        break;
      }
      case 82: {
        [self setAuthor:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MComment_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MComment_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasUserid1 {
  return result.hasUserid1;
}
- (NSString*) userid1 {
  return result.userid1;
}
- (MComment_Builder*) setUserid1:(NSString*) value {
  result.hasUserid1 = YES;
  result.userid1 = value;
  return self;
}
- (MComment_Builder*) clearUserid1 {
  result.hasUserid1 = NO;
  result.userid1 = @"";
  return self;
}
- (BOOL) hasNickname1 {
  return result.hasNickname1;
}
- (NSString*) nickname1 {
  return result.nickname1;
}
- (MComment_Builder*) setNickname1:(NSString*) value {
  result.hasNickname1 = YES;
  result.nickname1 = value;
  return self;
}
- (MComment_Builder*) clearNickname1 {
  result.hasNickname1 = NO;
  result.nickname1 = @"";
  return self;
}
- (BOOL) hasUserid2 {
  return result.hasUserid2;
}
- (NSString*) userid2 {
  return result.userid2;
}
- (MComment_Builder*) setUserid2:(NSString*) value {
  result.hasUserid2 = YES;
  result.userid2 = value;
  return self;
}
- (MComment_Builder*) clearUserid2 {
  result.hasUserid2 = NO;
  result.userid2 = @"";
  return self;
}
- (BOOL) hasNickname2 {
  return result.hasNickname2;
}
- (NSString*) nickname2 {
  return result.nickname2;
}
- (MComment_Builder*) setNickname2:(NSString*) value {
  result.hasNickname2 = YES;
  result.nickname2 = value;
  return self;
}
- (MComment_Builder*) clearNickname2 {
  result.hasNickname2 = NO;
  result.nickname2 = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MComment_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MComment_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MComment_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MComment_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasPid {
  return result.hasPid;
}
- (NSString*) pid {
  return result.pid;
}
- (MComment_Builder*) setPid:(NSString*) value {
  result.hasPid = YES;
  result.pid = value;
  return self;
}
- (MComment_Builder*) clearPid {
  result.hasPid = NO;
  result.pid = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MComment_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MComment_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasAuthor {
  return result.hasAuthor;
}
- (NSString*) author {
  return result.author;
}
- (MComment_Builder*) setAuthor:(NSString*) value {
  result.hasAuthor = YES;
  result.author = value;
  return self;
}
- (MComment_Builder*) clearAuthor {
  result.hasAuthor = NO;
  result.author = @"";
  return self;
}
@end

@interface MNewComments ()
@property (retain) NSMutableArray* mutableNewsList;
@end

@implementation MNewComments

@synthesize mutableNewsList;
- (void) dealloc {
  self.mutableNewsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MNewComments* defaultMNewCommentsInstance = nil;
+ (void) initialize {
  if (self == [MNewComments class]) {
    defaultMNewCommentsInstance = [[MNewComments alloc] init];
  }
}
+ (MNewComments*) defaultInstance {
  return defaultMNewCommentsInstance;
}
- (MNewComments*) defaultInstance {
  return defaultMNewCommentsInstance;
}
- (NSArray*) newsList {
  return mutableNewsList;
}
- (MComment*) newsAtIndex:(int32_t) index {
  id value = [mutableNewsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MComment* element in self.newsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MComment* element in self.newsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MNewComments*) parseFromData:(NSData*) data {
  return (MNewComments*)[[[MNewComments builder] mergeFromData:data] build];
}
+ (MNewComments*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNewComments*)[[[MNewComments builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MNewComments*) parseFromInputStream:(NSInputStream*) input {
  return (MNewComments*)[[[MNewComments builder] mergeFromInputStream:input] build];
}
+ (MNewComments*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNewComments*)[[[MNewComments builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MNewComments*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MNewComments*)[[[MNewComments builder] mergeFromCodedInputStream:input] build];
}
+ (MNewComments*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNewComments*)[[[MNewComments builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MNewComments_Builder*) builder {
  return [[[MNewComments_Builder alloc] init] autorelease];
}
+ (MNewComments_Builder*) builderWithPrototype:(MNewComments*) prototype {
  return [[MNewComments builder] mergeFrom:prototype];
}
- (MNewComments_Builder*) builder {
  return [MNewComments builder];
}
@end

@interface MNewComments_Builder()
@property (retain) MNewComments* result;
@end

@implementation MNewComments_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MNewComments alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MNewComments_Builder*) clear {
  self.result = [[[MNewComments alloc] init] autorelease];
  return self;
}
- (MNewComments_Builder*) clone {
  return [MNewComments builderWithPrototype:result];
}
- (MNewComments*) defaultInstance {
  return [MNewComments defaultInstance];
}
- (MNewComments*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MNewComments*) buildPartial {
  MNewComments* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MNewComments_Builder*) mergeFrom:(MNewComments*) other {
  if (other == [MNewComments defaultInstance]) {
    return self;
  }
  if (other.mutableNewsList.count > 0) {
    if (result.mutableNewsList == nil) {
      result.mutableNewsList = [NSMutableArray array];
    }
    [result.mutableNewsList addObjectsFromArray:other.mutableNewsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MNewComments_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MNewComments_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MComment_Builder* subBuilder = [MComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNews:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) newsList {
  if (result.mutableNewsList == nil) { return [NSArray array]; }
  return result.mutableNewsList;
}
- (MComment*) newsAtIndex:(int32_t) index {
  return [result newsAtIndex:index];
}
- (MNewComments_Builder*) replaceNewsAtIndex:(int32_t) index with:(MComment*) value {
  [result.mutableNewsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MNewComments_Builder*) addAllNews:(NSArray*) values {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObjectsFromArray:values];
  return self;
}
- (MNewComments_Builder*) clearNewsList {
  result.mutableNewsList = nil;
  return self;
}
- (MNewComments_Builder*) addNews:(MComment*) value {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObject:value];
  return self;
}
@end

@interface MAddTopic ()
@property (retain) NSString* title;
@property (retain) NSString* content;
@property (retain) NSMutableArray* mutableImgsList;
@end

@implementation MAddTopic

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
@synthesize mutableImgsList;
- (void) dealloc {
  self.title = nil;
  self.content = nil;
  self.mutableImgsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.title = @"";
    self.content = @"";
  }
  return self;
}
static MAddTopic* defaultMAddTopicInstance = nil;
+ (void) initialize {
  if (self == [MAddTopic class]) {
    defaultMAddTopicInstance = [[MAddTopic alloc] init];
  }
}
+ (MAddTopic*) defaultInstance {
  return defaultMAddTopicInstance;
}
- (MAddTopic*) defaultInstance {
  return defaultMAddTopicInstance;
}
- (NSArray*) imgsList {
  return mutableImgsList;
}
- (NSData*) imgsAtIndex:(int32_t) index {
  id value = [mutableImgsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  for (NSData* element in self.mutableImgsList) {
    [output writeData:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTitle) {
    size += computeStringSize(1, self.title);
  }
  if (self.hasContent) {
    size += computeStringSize(2, self.content);
  }
  {
    int32_t dataSize = 0;
    for (NSData* element in self.mutableImgsList) {
      dataSize += computeDataSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableImgsList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MAddTopic*) parseFromData:(NSData*) data {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromData:data] build];
}
+ (MAddTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MAddTopic*) parseFromInputStream:(NSInputStream*) input {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromInputStream:input] build];
}
+ (MAddTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MAddTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromCodedInputStream:input] build];
}
+ (MAddTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MAddTopic*)[[[MAddTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MAddTopic_Builder*) builder {
  return [[[MAddTopic_Builder alloc] init] autorelease];
}
+ (MAddTopic_Builder*) builderWithPrototype:(MAddTopic*) prototype {
  return [[MAddTopic builder] mergeFrom:prototype];
}
- (MAddTopic_Builder*) builder {
  return [MAddTopic builder];
}
@end

@interface MAddTopic_Builder()
@property (retain) MAddTopic* result;
@end

@implementation MAddTopic_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MAddTopic alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MAddTopic_Builder*) clear {
  self.result = [[[MAddTopic alloc] init] autorelease];
  return self;
}
- (MAddTopic_Builder*) clone {
  return [MAddTopic builderWithPrototype:result];
}
- (MAddTopic*) defaultInstance {
  return [MAddTopic defaultInstance];
}
- (MAddTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MAddTopic*) buildPartial {
  MAddTopic* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MAddTopic_Builder*) mergeFrom:(MAddTopic*) other {
  if (other == [MAddTopic defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.mutableImgsList.count > 0) {
    if (result.mutableImgsList == nil) {
      result.mutableImgsList = [NSMutableArray array];
    }
    [result.mutableImgsList addObjectsFromArray:other.mutableImgsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MAddTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MAddTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 26: {
        [self addImgs:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MAddTopic_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MAddTopic_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MAddTopic_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MAddTopic_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (NSArray*) imgsList {
  if (result.mutableImgsList == nil) {
    return [NSArray array];
  }
  return result.mutableImgsList;
}
- (NSData*) imgsAtIndex:(int32_t) index {
  return [result imgsAtIndex:index];
}
- (MAddTopic_Builder*) replaceImgsAtIndex:(int32_t) index with:(NSData*) value {
  [result.mutableImgsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MAddTopic_Builder*) addImgs:(NSData*) value {
  if (result.mutableImgsList == nil) {
    result.mutableImgsList = [NSMutableArray array];
  }
  [result.mutableImgsList addObject:value];
  return self;
}
- (MAddTopic_Builder*) addAllImgs:(NSArray*) values {
  if (result.mutableImgsList == nil) {
    result.mutableImgsList = [NSMutableArray array];
  }
  [result.mutableImgsList addObjectsFromArray:values];
  return self;
}
- (MAddTopic_Builder*) clearImgsList {
  result.mutableImgsList = nil;
  return self;
}
@end

