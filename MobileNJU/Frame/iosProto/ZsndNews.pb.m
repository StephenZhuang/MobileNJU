// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndNews.pb.h"

@implementation ZsndNewsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndNewsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MNewsList ()
@property (retain) NSMutableArray* mutableNewsList;
@end

@implementation MNewsList

@synthesize mutableNewsList;
- (void) dealloc {
  self.mutableNewsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MNewsList* defaultMNewsListInstance = nil;
+ (void) initialize {
  if (self == [MNewsList class]) {
    defaultMNewsListInstance = [[MNewsList alloc] init];
  }
}
+ (MNewsList*) defaultInstance {
  return defaultMNewsListInstance;
}
- (MNewsList*) defaultInstance {
  return defaultMNewsListInstance;
}
- (NSArray*) newsList {
  return mutableNewsList;
}
- (MNews*) newsAtIndex:(int32_t) index {
  id value = [mutableNewsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MNews* element in self.newsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MNews* element in self.newsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MNewsList*) parseFromData:(NSData*) data {
  return (MNewsList*)[[[MNewsList builder] mergeFromData:data] build];
}
+ (MNewsList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNewsList*)[[[MNewsList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MNewsList*) parseFromInputStream:(NSInputStream*) input {
  return (MNewsList*)[[[MNewsList builder] mergeFromInputStream:input] build];
}
+ (MNewsList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNewsList*)[[[MNewsList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MNewsList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MNewsList*)[[[MNewsList builder] mergeFromCodedInputStream:input] build];
}
+ (MNewsList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNewsList*)[[[MNewsList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MNewsList_Builder*) builder {
  return [[[MNewsList_Builder alloc] init] autorelease];
}
+ (MNewsList_Builder*) builderWithPrototype:(MNewsList*) prototype {
  return [[MNewsList builder] mergeFrom:prototype];
}
- (MNewsList_Builder*) builder {
  return [MNewsList builder];
}
@end

@interface MNewsList_Builder()
@property (retain) MNewsList* result;
@end

@implementation MNewsList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MNewsList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MNewsList_Builder*) clear {
  self.result = [[[MNewsList alloc] init] autorelease];
  return self;
}
- (MNewsList_Builder*) clone {
  return [MNewsList builderWithPrototype:result];
}
- (MNewsList*) defaultInstance {
  return [MNewsList defaultInstance];
}
- (MNewsList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MNewsList*) buildPartial {
  MNewsList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MNewsList_Builder*) mergeFrom:(MNewsList*) other {
  if (other == [MNewsList defaultInstance]) {
    return self;
  }
  if (other.mutableNewsList.count > 0) {
    if (result.mutableNewsList == nil) {
      result.mutableNewsList = [NSMutableArray array];
    }
    [result.mutableNewsList addObjectsFromArray:other.mutableNewsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MNewsList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MNewsList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }         break;
      }
      case 10: {
        MNews_Builder* subBuilder = [MNews builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNews:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) newsList {
  if (result.mutableNewsList == nil) { return [NSArray array]; }
  return result.mutableNewsList;
}
- (MNews*) newsAtIndex:(int32_t) index {
  return [result newsAtIndex:index];
}
- (MNewsList_Builder*) replaceNewsAtIndex:(int32_t) index with:(MNews*) value {
  [result.mutableNewsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MNewsList_Builder*) addAllNews:(NSArray*) values {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObjectsFromArray:values];
  return self;
}
- (MNewsList_Builder*) clearNewsList {
  result.mutableNewsList = nil;
  return self;
}
- (MNewsList_Builder*) addNews:(MNews*) value {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObject:value];
  return self;
}
@end

@interface MNews ()
@property (retain) NSString* id;
@property (retain) NSString* img;
@property (retain) NSString* source;
@property (retain) NSString* title;
@property (retain) NSString* content;
@property (retain) NSString* time;
@property (retain) NSString* url;
@property (retain) NSString* author;
@property int32_t comment;
@end

@implementation MNews

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value {
  hasSource_ = !!value;
}
@synthesize source;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value {
  hasTime_ = !!value;
}
@synthesize time;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value {
  hasUrl_ = !!value;
}
@synthesize url;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) value {
  hasAuthor_ = !!value;
}
@synthesize author;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value {
  hasComment_ = !!value;
}
@synthesize comment;
- (void) dealloc {
  self.id = nil;
  self.img = nil;
  self.source = nil;
  self.title = nil;
  self.content = nil;
  self.time = nil;
  self.url = nil;
  self.author = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.img = @"";
    self.source = @"";
    self.title = @"";
    self.content = @"";
    self.time = @"";
    self.url = @"";
    self.author = @"";
    self.comment = 0;
  }
  return self;
}
static MNews* defaultMNewsInstance = nil;
+ (void) initialize {
  if (self == [MNews class]) {
    defaultMNewsInstance = [[MNews alloc] init];
  }
}
+ (MNews*) defaultInstance {
  return defaultMNewsInstance;
}
- (MNews*) defaultInstance {
  return defaultMNewsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasImg) {
    [output writeString:2 value:self.img];
  }
  if (self.hasSource) {
    [output writeString:3 value:self.source];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasTime) {
    [output writeString:6 value:self.time];
  }
  if (self.hasUrl) {
    [output writeString:7 value:self.url];
  }
  if (self.hasAuthor) {
    [output writeString:8 value:self.author];
  }
  if (self.hasComment) {
    [output writeInt32:9 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasImg) {
    size += computeStringSize(2, self.img);
  }
  if (self.hasSource) {
    size += computeStringSize(3, self.source);
  }
  if (self.hasTitle) {
    size += computeStringSize(4, self.title);
  }
  if (self.hasContent) {
    size += computeStringSize(5, self.content);
  }
  if (self.hasTime) {
    size += computeStringSize(6, self.time);
  }
  if (self.hasUrl) {
    size += computeStringSize(7, self.url);
  }
  if (self.hasAuthor) {
    size += computeStringSize(8, self.author);
  }
  if (self.hasComment) {
    size += computeInt32Size(9, self.comment);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MNews*) parseFromData:(NSData*) data {
  return (MNews*)[[[MNews builder] mergeFromData:data] build];
}
+ (MNews*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNews*)[[[MNews builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MNews*) parseFromInputStream:(NSInputStream*) input {
  return (MNews*)[[[MNews builder] mergeFromInputStream:input] build];
}
+ (MNews*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNews*)[[[MNews builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MNews*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MNews*)[[[MNews builder] mergeFromCodedInputStream:input] build];
}
+ (MNews*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MNews*)[[[MNews builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MNews_Builder*) builder {
  return [[[MNews_Builder alloc] init] autorelease];
}
+ (MNews_Builder*) builderWithPrototype:(MNews*) prototype {
  return [[MNews builder] mergeFrom:prototype];
}
- (MNews_Builder*) builder {
  return [MNews builder];
}
@end

@interface MNews_Builder()
@property (retain) MNews* result;
@end

@implementation MNews_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MNews alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MNews_Builder*) clear {
  self.result = [[[MNews alloc] init] autorelease];
  return self;
}
- (MNews_Builder*) clone {
  return [MNews builderWithPrototype:result];
}
- (MNews*) defaultInstance {
  return [MNews defaultInstance];
}
- (MNews*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MNews*) buildPartial {
  MNews* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MNews_Builder*) mergeFrom:(MNews*) other {
  if (other == [MNews defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MNews_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MNews_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setImg:[input readString]];
        break;
      }
      case 26: {
        [self setSource:[input readString]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setTime:[input readString]];
        break;
      }
      case 58: {
        [self setUrl:[input readString]];
        break;
      }
      case 66: {
        [self setAuthor:[input readString]];
        break;
      }
      case 72: {
        [self setComment:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MNews_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MNews_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSString*) img {
  return result.img;
}
- (MNews_Builder*) setImg:(NSString*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MNews_Builder*) clearImg {
  result.hasImg = NO;
  result.img = @"";
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (NSString*) source {
  return result.source;
}
- (MNews_Builder*) setSource:(NSString*) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (MNews_Builder*) clearSource {
  result.hasSource = NO;
  result.source = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MNews_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MNews_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MNews_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MNews_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (NSString*) time {
  return result.time;
}
- (MNews_Builder*) setTime:(NSString*) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (MNews_Builder*) clearTime {
  result.hasTime = NO;
  result.time = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (MNews_Builder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (MNews_Builder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasAuthor {
  return result.hasAuthor;
}
- (NSString*) author {
  return result.author;
}
- (MNews_Builder*) setAuthor:(NSString*) value {
  result.hasAuthor = YES;
  result.author = value;
  return self;
}
- (MNews_Builder*) clearAuthor {
  result.hasAuthor = NO;
  result.author = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (int32_t) comment {
  return result.comment;
}
- (MNews_Builder*) setComment:(int32_t) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (MNews_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = 0;
  return self;
}
@end

@interface MRssList ()
@property (retain) NSMutableArray* mutableListList;
@end

@implementation MRssList

@synthesize mutableListList;
- (void) dealloc {
  self.mutableListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MRssList* defaultMRssListInstance = nil;
+ (void) initialize {
  if (self == [MRssList class]) {
    defaultMRssListInstance = [[MRssList alloc] init];
  }
}
+ (MRssList*) defaultInstance {
  return defaultMRssListInstance;
}
- (MRssList*) defaultInstance {
  return defaultMRssListInstance;
}
- (NSArray*) listList {
  return mutableListList;
}
- (MRss*) listAtIndex:(int32_t) index {
  id value = [mutableListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MRss* element in self.listList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MRss* element in self.listList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MRssList*) parseFromData:(NSData*) data {
  return (MRssList*)[[[MRssList builder] mergeFromData:data] build];
}
+ (MRssList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRssList*)[[[MRssList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MRssList*) parseFromInputStream:(NSInputStream*) input {
  return (MRssList*)[[[MRssList builder] mergeFromInputStream:input] build];
}
+ (MRssList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRssList*)[[[MRssList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRssList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MRssList*)[[[MRssList builder] mergeFromCodedInputStream:input] build];
}
+ (MRssList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRssList*)[[[MRssList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRssList_Builder*) builder {
  return [[[MRssList_Builder alloc] init] autorelease];
}
+ (MRssList_Builder*) builderWithPrototype:(MRssList*) prototype {
  return [[MRssList builder] mergeFrom:prototype];
}
- (MRssList_Builder*) builder {
  return [MRssList builder];
}
@end

@interface MRssList_Builder()
@property (retain) MRssList* result;
@end

@implementation MRssList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MRssList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MRssList_Builder*) clear {
  self.result = [[[MRssList alloc] init] autorelease];
  return self;
}
- (MRssList_Builder*) clone {
  return [MRssList builderWithPrototype:result];
}
- (MRssList*) defaultInstance {
  return [MRssList defaultInstance];
}
- (MRssList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MRssList*) buildPartial {
  MRssList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MRssList_Builder*) mergeFrom:(MRssList*) other {
  if (other == [MRssList defaultInstance]) {
    return self;
  }
  if (other.mutableListList.count > 0) {
    if (result.mutableListList == nil) {
      result.mutableListList = [NSMutableArray array];
    }
    [result.mutableListList addObjectsFromArray:other.mutableListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MRssList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MRssList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MRss_Builder* subBuilder = [MRss builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) listList {
  if (result.mutableListList == nil) { return [NSArray array]; }
  return result.mutableListList;
}
- (MRss*) listAtIndex:(int32_t) index {
  return [result listAtIndex:index];
}
- (MRssList_Builder*) replaceListAtIndex:(int32_t) index with:(MRss*) value {
  [result.mutableListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MRssList_Builder*) addAllList:(NSArray*) values {
  if (result.mutableListList == nil) {
    result.mutableListList = [NSMutableArray array];
  }
  [result.mutableListList addObjectsFromArray:values];
  return self;
}
- (MRssList_Builder*) clearListList {
  result.mutableListList = nil;
  return self;
}
- (MRssList_Builder*) addList:(MRss*) value {
  if (result.mutableListList == nil) {
    result.mutableListList = [NSMutableArray array];
  }
  [result.mutableListList addObject:value];
  return self;
}
@end

@interface MRss ()
@property (retain) NSString* id;
@property (retain) NSString* img;
@property (retain) NSString* title;
@property (retain) NSString* content;
@property int32_t state;
@end

@implementation MRss

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value {
  hasContent_ = !!value;
}
@synthesize content;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) value {
  hasState_ = !!value;
}
@synthesize state;
- (void) dealloc {
  self.id = nil;
  self.img = nil;
  self.title = nil;
  self.content = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.img = @"";
    self.title = @"";
    self.content = @"";
    self.state = 0;
  }
  return self;
}
static MRss* defaultMRssInstance = nil;
+ (void) initialize {
  if (self == [MRss class]) {
    defaultMRssInstance = [[MRss alloc] init];
  }
}
+ (MRss*) defaultInstance {
  return defaultMRssInstance;
}
- (MRss*) defaultInstance {
  return defaultMRssInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasImg) {
    [output writeString:2 value:self.img];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasState) {
    [output writeInt32:5 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasImg) {
    size += computeStringSize(2, self.img);
  }
  if (self.hasTitle) {
    size += computeStringSize(3, self.title);
  }
  if (self.hasContent) {
    size += computeStringSize(4, self.content);
  }
  if (self.hasState) {
    size += computeInt32Size(5, self.state);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MRss*) parseFromData:(NSData*) data {
  return (MRss*)[[[MRss builder] mergeFromData:data] build];
}
+ (MRss*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRss*)[[[MRss builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MRss*) parseFromInputStream:(NSInputStream*) input {
  return (MRss*)[[[MRss builder] mergeFromInputStream:input] build];
}
+ (MRss*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRss*)[[[MRss builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRss*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MRss*)[[[MRss builder] mergeFromCodedInputStream:input] build];
}
+ (MRss*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MRss*)[[[MRss builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MRss_Builder*) builder {
  return [[[MRss_Builder alloc] init] autorelease];
}
+ (MRss_Builder*) builderWithPrototype:(MRss*) prototype {
  return [[MRss builder] mergeFrom:prototype];
}
- (MRss_Builder*) builder {
  return [MRss builder];
}
@end

@interface MRss_Builder()
@property (retain) MRss* result;
@end

@implementation MRss_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MRss alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MRss_Builder*) clear {
  self.result = [[[MRss alloc] init] autorelease];
  return self;
}
- (MRss_Builder*) clone {
  return [MRss builderWithPrototype:result];
}
- (MRss*) defaultInstance {
  return [MRss defaultInstance];
}
- (MRss*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MRss*) buildPartial {
  MRss* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MRss_Builder*) mergeFrom:(MRss*) other {
  if (other == [MRss defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MRss_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MRss_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setImg:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 40: {
        [self setState:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MRss_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MRss_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSString*) img {
  return result.img;
}
- (MRss_Builder*) setImg:(NSString*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MRss_Builder*) clearImg {
  result.hasImg = NO;
  result.img = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MRss_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MRss_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MRss_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MRss_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasState {
  return result.hasState;
}
- (int32_t) state {
  return result.state;
}
- (MRss_Builder*) setState:(int32_t) value {
  result.hasState = YES;
  result.state = value;
  return self;
}
- (MRss_Builder*) clearState {
  result.hasState = NO;
  result.state = 0;
  return self;
}
@end

@interface MMyRssList ()
@property (retain) NSMutableArray* mutableListList;
@end

@implementation MMyRssList

@synthesize mutableListList;
- (void) dealloc {
  self.mutableListList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static MMyRssList* defaultMMyRssListInstance = nil;
+ (void) initialize {
  if (self == [MMyRssList class]) {
    defaultMMyRssListInstance = [[MMyRssList alloc] init];
  }
}
+ (MMyRssList*) defaultInstance {
  return defaultMMyRssListInstance;
}
- (MMyRssList*) defaultInstance {
  return defaultMMyRssListInstance;
}
- (NSArray*) listList {
  return mutableListList;
}
- (MMyRss*) listAtIndex:(int32_t) index {
  id value = [mutableListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MMyRss* element in self.listList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MMyRss* element in self.listList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MMyRssList*) parseFromData:(NSData*) data {
  return (MMyRssList*)[[[MMyRssList builder] mergeFromData:data] build];
}
+ (MMyRssList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMyRssList*)[[[MMyRssList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MMyRssList*) parseFromInputStream:(NSInputStream*) input {
  return (MMyRssList*)[[[MMyRssList builder] mergeFromInputStream:input] build];
}
+ (MMyRssList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMyRssList*)[[[MMyRssList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMyRssList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MMyRssList*)[[[MMyRssList builder] mergeFromCodedInputStream:input] build];
}
+ (MMyRssList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMyRssList*)[[[MMyRssList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMyRssList_Builder*) builder {
  return [[[MMyRssList_Builder alloc] init] autorelease];
}
+ (MMyRssList_Builder*) builderWithPrototype:(MMyRssList*) prototype {
  return [[MMyRssList builder] mergeFrom:prototype];
}
- (MMyRssList_Builder*) builder {
  return [MMyRssList builder];
}
@end

@interface MMyRssList_Builder()
@property (retain) MMyRssList* result;
@end

@implementation MMyRssList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MMyRssList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MMyRssList_Builder*) clear {
  self.result = [[[MMyRssList alloc] init] autorelease];
  return self;
}
- (MMyRssList_Builder*) clone {
  return [MMyRssList builderWithPrototype:result];
}
- (MMyRssList*) defaultInstance {
  return [MMyRssList defaultInstance];
}
- (MMyRssList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MMyRssList*) buildPartial {
  MMyRssList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MMyRssList_Builder*) mergeFrom:(MMyRssList*) other {
  if (other == [MMyRssList defaultInstance]) {
    return self;
  }
  if (other.mutableListList.count > 0) {
    if (result.mutableListList == nil) {
      result.mutableListList = [NSMutableArray array];
    }
    [result.mutableListList addObjectsFromArray:other.mutableListList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MMyRssList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MMyRssList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MMyRss_Builder* subBuilder = [MMyRss builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) listList {
  if (result.mutableListList == nil) { return [NSArray array]; }
  return result.mutableListList;
}
- (MMyRss*) listAtIndex:(int32_t) index {
  return [result listAtIndex:index];
}
- (MMyRssList_Builder*) replaceListAtIndex:(int32_t) index with:(MMyRss*) value {
  [result.mutableListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MMyRssList_Builder*) addAllList:(NSArray*) values {
  if (result.mutableListList == nil) {
    result.mutableListList = [NSMutableArray array];
  }
  [result.mutableListList addObjectsFromArray:values];
  return self;
}
- (MMyRssList_Builder*) clearListList {
  result.mutableListList = nil;
  return self;
}
- (MMyRssList_Builder*) addList:(MMyRss*) value {
  if (result.mutableListList == nil) {
    result.mutableListList = [NSMutableArray array];
  }
  [result.mutableListList addObject:value];
  return self;
}
@end

@interface MMyRss ()
@property (retain) NSString* id;
@property (retain) NSString* title;
@property (retain) NSMutableArray* mutableNewsList;
@end

@implementation MMyRss

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
@synthesize mutableNewsList;
- (void) dealloc {
  self.id = nil;
  self.title = nil;
  self.mutableNewsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.title = @"";
  }
  return self;
}
static MMyRss* defaultMMyRssInstance = nil;
+ (void) initialize {
  if (self == [MMyRss class]) {
    defaultMMyRssInstance = [[MMyRss alloc] init];
  }
}
+ (MMyRss*) defaultInstance {
  return defaultMMyRssInstance;
}
- (MMyRss*) defaultInstance {
  return defaultMMyRssInstance;
}
- (NSArray*) newsList {
  return mutableNewsList;
}
- (MNews*) newsAtIndex:(int32_t) index {
  id value = [mutableNewsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  for (MNews* element in self.newsList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTitle) {
    size += computeStringSize(2, self.title);
  }
  for (MNews* element in self.newsList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MMyRss*) parseFromData:(NSData*) data {
  return (MMyRss*)[[[MMyRss builder] mergeFromData:data] build];
}
+ (MMyRss*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMyRss*)[[[MMyRss builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MMyRss*) parseFromInputStream:(NSInputStream*) input {
  return (MMyRss*)[[[MMyRss builder] mergeFromInputStream:input] build];
}
+ (MMyRss*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMyRss*)[[[MMyRss builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMyRss*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MMyRss*)[[[MMyRss builder] mergeFromCodedInputStream:input] build];
}
+ (MMyRss*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MMyRss*)[[[MMyRss builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MMyRss_Builder*) builder {
  return [[[MMyRss_Builder alloc] init] autorelease];
}
+ (MMyRss_Builder*) builderWithPrototype:(MMyRss*) prototype {
  return [[MMyRss builder] mergeFrom:prototype];
}
- (MMyRss_Builder*) builder {
  return [MMyRss builder];
}
@end

@interface MMyRss_Builder()
@property (retain) MMyRss* result;
@end

@implementation MMyRss_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MMyRss alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MMyRss_Builder*) clear {
  self.result = [[[MMyRss alloc] init] autorelease];
  return self;
}
- (MMyRss_Builder*) clone {
  return [MMyRss builderWithPrototype:result];
}
- (MMyRss*) defaultInstance {
  return [MMyRss defaultInstance];
}
- (MMyRss*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MMyRss*) buildPartial {
  MMyRss* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MMyRss_Builder*) mergeFrom:(MMyRss*) other {
  if (other == [MMyRss defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.mutableNewsList.count > 0) {
    if (result.mutableNewsList == nil) {
      result.mutableNewsList = [NSMutableArray array];
    }
    [result.mutableNewsList addObjectsFromArray:other.mutableNewsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MMyRss_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MMyRss_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        MNews_Builder* subBuilder = [MNews builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNews:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MMyRss_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MMyRss_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MMyRss_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MMyRss_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (NSArray*) newsList {
  if (result.mutableNewsList == nil) { return [NSArray array]; }
  return result.mutableNewsList;
}
- (MNews*) newsAtIndex:(int32_t) index {
  return [result newsAtIndex:index];
}
- (MMyRss_Builder*) replaceNewsAtIndex:(int32_t) index with:(MNews*) value {
  [result.mutableNewsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MMyRss_Builder*) addAllNews:(NSArray*) values {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObjectsFromArray:values];
  return self;
}
- (MMyRss_Builder*) clearNewsList {
  result.mutableNewsList = nil;
  return self;
}
- (MMyRss_Builder*) addNews:(MNews*) value {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObject:value];
  return self;
}
@end

