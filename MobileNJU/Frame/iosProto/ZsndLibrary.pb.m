// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ZsndLibrary.pb.h"

@implementation ZsndLibraryRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsndLibraryRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MBookList ()
@property (retain) NSMutableArray* mutableNewsList;
@property int32_t cnt;
@property (retain) NSData* img;
@end

@implementation MBookList

@synthesize mutableNewsList;
- (BOOL) hasCnt {
  return !!hasCnt_;
}
- (void) setHasCnt:(BOOL) value {
  hasCnt_ = !!value;
}
@synthesize cnt;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value {
  hasImg_ = !!value;
}
@synthesize img;
- (void) dealloc {
  self.mutableNewsList = nil;
  self.img = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.cnt = 0;
    self.img = [NSData data];
  }
  return self;
}
static MBookList* defaultMBookListInstance = nil;
+ (void) initialize {
  if (self == [MBookList class]) {
    defaultMBookListInstance = [[MBookList alloc] init];
  }
}
+ (MBookList*) defaultInstance {
  return defaultMBookListInstance;
}
- (MBookList*) defaultInstance {
  return defaultMBookListInstance;
}
- (NSArray*) newsList {
  return mutableNewsList;
}
- (MBook*) newsAtIndex:(int32_t) index {
  id value = [mutableNewsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MBook* element in self.newsList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasCnt) {
    [output writeInt32:2 value:self.cnt];
  }
  if (self.hasImg) {
    [output writeData:3 value:self.img];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MBook* element in self.newsList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasCnt) {
    size += computeInt32Size(2, self.cnt);
  }
  if (self.hasImg) {
    size += computeDataSize(3, self.img);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MBookList*) parseFromData:(NSData*) data {
  return (MBookList*)[[[MBookList builder] mergeFromData:data] build];
}
+ (MBookList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBookList*)[[[MBookList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MBookList*) parseFromInputStream:(NSInputStream*) input {
  return (MBookList*)[[[MBookList builder] mergeFromInputStream:input] build];
}
+ (MBookList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBookList*)[[[MBookList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBookList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MBookList*)[[[MBookList builder] mergeFromCodedInputStream:input] build];
}
+ (MBookList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBookList*)[[[MBookList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBookList_Builder*) builder {
  return [[[MBookList_Builder alloc] init] autorelease];
}
+ (MBookList_Builder*) builderWithPrototype:(MBookList*) prototype {
  return [[MBookList builder] mergeFrom:prototype];
}
- (MBookList_Builder*) builder {
  return [MBookList builder];
}
@end

@interface MBookList_Builder()
@property (retain) MBookList* result;
@end

@implementation MBookList_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MBookList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MBookList_Builder*) clear {
  self.result = [[[MBookList alloc] init] autorelease];
  return self;
}
- (MBookList_Builder*) clone {
  return [MBookList builderWithPrototype:result];
}
- (MBookList*) defaultInstance {
  return [MBookList defaultInstance];
}
- (MBookList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MBookList*) buildPartial {
  MBookList* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MBookList_Builder*) mergeFrom:(MBookList*) other {
  if (other == [MBookList defaultInstance]) {
    return self;
  }
  if (other.mutableNewsList.count > 0) {
    if (result.mutableNewsList == nil) {
      result.mutableNewsList = [NSMutableArray array];
    }
    [result.mutableNewsList addObjectsFromArray:other.mutableNewsList];
  }
  if (other.hasCnt) {
    [self setCnt:other.cnt];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MBookList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MBookList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MBook_Builder* subBuilder = [MBook builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNews:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setCnt:[input readInt32]];
        break;
      }
      case 26: {
        [self setImg:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) newsList {
  if (result.mutableNewsList == nil) { return [NSArray array]; }
  return result.mutableNewsList;
}
- (MBook*) newsAtIndex:(int32_t) index {
  return [result newsAtIndex:index];
}
- (MBookList_Builder*) replaceNewsAtIndex:(int32_t) index with:(MBook*) value {
  [result.mutableNewsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MBookList_Builder*) addAllNews:(NSArray*) values {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObjectsFromArray:values];
  return self;
}
- (MBookList_Builder*) clearNewsList {
  result.mutableNewsList = nil;
  return self;
}
- (MBookList_Builder*) addNews:(MBook*) value {
  if (result.mutableNewsList == nil) {
    result.mutableNewsList = [NSMutableArray array];
  }
  [result.mutableNewsList addObject:value];
  return self;
}
- (BOOL) hasCnt {
  return result.hasCnt;
}
- (int32_t) cnt {
  return result.cnt;
}
- (MBookList_Builder*) setCnt:(int32_t) value {
  result.hasCnt = YES;
  result.cnt = value;
  return self;
}
- (MBookList_Builder*) clearCnt {
  result.hasCnt = NO;
  result.cnt = 0;
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSData*) img {
  return result.img;
}
- (MBookList_Builder*) setImg:(NSData*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MBookList_Builder*) clearImg {
  result.hasImg = NO;
  result.img = [NSData data];
  return self;
}
@end

@interface MBook ()
@property (retain) NSString* id;
@property (retain) NSString* title;
@property (retain) NSString* author;
@property (retain) NSString* publish;
@property int32_t total;
@property int32_t canBorrow;
@property (retain) NSString* borrowTime;
@property (retain) NSString* backTime;
@property int32_t canRenew;
@property (retain) NSMutableArray* mutableDetailsList;
@end

@implementation MBook

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value {
  hasTitle_ = !!value;
}
@synthesize title;
- (BOOL) hasAuthor {
  return !!hasAuthor_;
}
- (void) setHasAuthor:(BOOL) value {
  hasAuthor_ = !!value;
}
@synthesize author;
- (BOOL) hasPublish {
  return !!hasPublish_;
}
- (void) setHasPublish:(BOOL) value {
  hasPublish_ = !!value;
}
@synthesize publish;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) value {
  hasTotal_ = !!value;
}
@synthesize total;
- (BOOL) hasCanBorrow {
  return !!hasCanBorrow_;
}
- (void) setHasCanBorrow:(BOOL) value {
  hasCanBorrow_ = !!value;
}
@synthesize canBorrow;
- (BOOL) hasBorrowTime {
  return !!hasBorrowTime_;
}
- (void) setHasBorrowTime:(BOOL) value {
  hasBorrowTime_ = !!value;
}
@synthesize borrowTime;
- (BOOL) hasBackTime {
  return !!hasBackTime_;
}
- (void) setHasBackTime:(BOOL) value {
  hasBackTime_ = !!value;
}
@synthesize backTime;
- (BOOL) hasCanRenew {
  return !!hasCanRenew_;
}
- (void) setHasCanRenew:(BOOL) value {
  hasCanRenew_ = !!value;
}
@synthesize canRenew;
@synthesize mutableDetailsList;
- (void) dealloc {
  self.id = nil;
  self.title = nil;
  self.author = nil;
  self.publish = nil;
  self.borrowTime = nil;
  self.backTime = nil;
  self.mutableDetailsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.title = @"";
    self.author = @"";
    self.publish = @"";
    self.total = 0;
    self.canBorrow = 0;
    self.borrowTime = @"";
    self.backTime = @"";
    self.canRenew = 0;
  }
  return self;
}
static MBook* defaultMBookInstance = nil;
+ (void) initialize {
  if (self == [MBook class]) {
    defaultMBookInstance = [[MBook alloc] init];
  }
}
+ (MBook*) defaultInstance {
  return defaultMBookInstance;
}
- (MBook*) defaultInstance {
  return defaultMBookInstance;
}
- (NSArray*) detailsList {
  return mutableDetailsList;
}
- (MBookDetail*) detailsAtIndex:(int32_t) index {
  id value = [mutableDetailsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasAuthor) {
    [output writeString:3 value:self.author];
  }
  if (self.hasPublish) {
    [output writeString:4 value:self.publish];
  }
  if (self.hasTotal) {
    [output writeInt32:5 value:self.total];
  }
  if (self.hasCanBorrow) {
    [output writeInt32:6 value:self.canBorrow];
  }
  if (self.hasBorrowTime) {
    [output writeString:7 value:self.borrowTime];
  }
  if (self.hasBackTime) {
    [output writeString:8 value:self.backTime];
  }
  if (self.hasCanRenew) {
    [output writeInt32:9 value:self.canRenew];
  }
  for (MBookDetail* element in self.detailsList) {
    [output writeMessage:10 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasTitle) {
    size += computeStringSize(2, self.title);
  }
  if (self.hasAuthor) {
    size += computeStringSize(3, self.author);
  }
  if (self.hasPublish) {
    size += computeStringSize(4, self.publish);
  }
  if (self.hasTotal) {
    size += computeInt32Size(5, self.total);
  }
  if (self.hasCanBorrow) {
    size += computeInt32Size(6, self.canBorrow);
  }
  if (self.hasBorrowTime) {
    size += computeStringSize(7, self.borrowTime);
  }
  if (self.hasBackTime) {
    size += computeStringSize(8, self.backTime);
  }
  if (self.hasCanRenew) {
    size += computeInt32Size(9, self.canRenew);
  }
  for (MBookDetail* element in self.detailsList) {
    size += computeMessageSize(10, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MBook*) parseFromData:(NSData*) data {
  return (MBook*)[[[MBook builder] mergeFromData:data] build];
}
+ (MBook*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBook*)[[[MBook builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MBook*) parseFromInputStream:(NSInputStream*) input {
  return (MBook*)[[[MBook builder] mergeFromInputStream:input] build];
}
+ (MBook*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBook*)[[[MBook builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBook*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MBook*)[[[MBook builder] mergeFromCodedInputStream:input] build];
}
+ (MBook*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBook*)[[[MBook builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBook_Builder*) builder {
  return [[[MBook_Builder alloc] init] autorelease];
}
+ (MBook_Builder*) builderWithPrototype:(MBook*) prototype {
  return [[MBook builder] mergeFrom:prototype];
}
- (MBook_Builder*) builder {
  return [MBook builder];
}
@end

@interface MBook_Builder()
@property (retain) MBook* result;
@end

@implementation MBook_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MBook alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MBook_Builder*) clear {
  self.result = [[[MBook alloc] init] autorelease];
  return self;
}
- (MBook_Builder*) clone {
  return [MBook builderWithPrototype:result];
}
- (MBook*) defaultInstance {
  return [MBook defaultInstance];
}
- (MBook*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MBook*) buildPartial {
  MBook* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MBook_Builder*) mergeFrom:(MBook*) other {
  if (other == [MBook defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasAuthor) {
    [self setAuthor:other.author];
  }
  if (other.hasPublish) {
    [self setPublish:other.publish];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasCanBorrow) {
    [self setCanBorrow:other.canBorrow];
  }
  if (other.hasBorrowTime) {
    [self setBorrowTime:other.borrowTime];
  }
  if (other.hasBackTime) {
    [self setBackTime:other.backTime];
  }
  if (other.hasCanRenew) {
    [self setCanRenew:other.canRenew];
  }
  if (other.mutableDetailsList.count > 0) {
    if (result.mutableDetailsList == nil) {
      result.mutableDetailsList = [NSMutableArray array];
    }
    [result.mutableDetailsList addObjectsFromArray:other.mutableDetailsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MBook_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MBook_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        [self setAuthor:[input readString]];
        break;
      }
      case 34: {
        [self setPublish:[input readString]];
        break;
      }
      case 40: {
        [self setTotal:[input readInt32]];
        break;
      }
      case 48: {
        [self setCanBorrow:[input readInt32]];
        break;
      }
      case 58: {
        [self setBorrowTime:[input readString]];
        break;
      }
      case 66: {
        [self setBackTime:[input readString]];
        break;
      }
      case 72: {
        [self setCanRenew:[input readInt32]];
        break;
      }
      case 82: {
        MBookDetail_Builder* subBuilder = [MBookDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDetails:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (MBook_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MBook_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (MBook_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (MBook_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasAuthor {
  return result.hasAuthor;
}
- (NSString*) author {
  return result.author;
}
- (MBook_Builder*) setAuthor:(NSString*) value {
  result.hasAuthor = YES;
  result.author = value;
  return self;
}
- (MBook_Builder*) clearAuthor {
  result.hasAuthor = NO;
  result.author = @"";
  return self;
}
- (BOOL) hasPublish {
  return result.hasPublish;
}
- (NSString*) publish {
  return result.publish;
}
- (MBook_Builder*) setPublish:(NSString*) value {
  result.hasPublish = YES;
  result.publish = value;
  return self;
}
- (MBook_Builder*) clearPublish {
  result.hasPublish = NO;
  result.publish = @"";
  return self;
}
- (BOOL) hasTotal {
  return result.hasTotal;
}
- (int32_t) total {
  return result.total;
}
- (MBook_Builder*) setTotal:(int32_t) value {
  result.hasTotal = YES;
  result.total = value;
  return self;
}
- (MBook_Builder*) clearTotal {
  result.hasTotal = NO;
  result.total = 0;
  return self;
}
- (BOOL) hasCanBorrow {
  return result.hasCanBorrow;
}
- (int32_t) canBorrow {
  return result.canBorrow;
}
- (MBook_Builder*) setCanBorrow:(int32_t) value {
  result.hasCanBorrow = YES;
  result.canBorrow = value;
  return self;
}
- (MBook_Builder*) clearCanBorrow {
  result.hasCanBorrow = NO;
  result.canBorrow = 0;
  return self;
}
- (BOOL) hasBorrowTime {
  return result.hasBorrowTime;
}
- (NSString*) borrowTime {
  return result.borrowTime;
}
- (MBook_Builder*) setBorrowTime:(NSString*) value {
  result.hasBorrowTime = YES;
  result.borrowTime = value;
  return self;
}
- (MBook_Builder*) clearBorrowTime {
  result.hasBorrowTime = NO;
  result.borrowTime = @"";
  return self;
}
- (BOOL) hasBackTime {
  return result.hasBackTime;
}
- (NSString*) backTime {
  return result.backTime;
}
- (MBook_Builder*) setBackTime:(NSString*) value {
  result.hasBackTime = YES;
  result.backTime = value;
  return self;
}
- (MBook_Builder*) clearBackTime {
  result.hasBackTime = NO;
  result.backTime = @"";
  return self;
}
- (BOOL) hasCanRenew {
  return result.hasCanRenew;
}
- (int32_t) canRenew {
  return result.canRenew;
}
- (MBook_Builder*) setCanRenew:(int32_t) value {
  result.hasCanRenew = YES;
  result.canRenew = value;
  return self;
}
- (MBook_Builder*) clearCanRenew {
  result.hasCanRenew = NO;
  result.canRenew = 0;
  return self;
}
- (NSArray*) detailsList {
  if (result.mutableDetailsList == nil) { return [NSArray array]; }
  return result.mutableDetailsList;
}
- (MBookDetail*) detailsAtIndex:(int32_t) index {
  return [result detailsAtIndex:index];
}
- (MBook_Builder*) replaceDetailsAtIndex:(int32_t) index with:(MBookDetail*) value {
  [result.mutableDetailsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (MBook_Builder*) addAllDetails:(NSArray*) values {
  if (result.mutableDetailsList == nil) {
    result.mutableDetailsList = [NSMutableArray array];
  }
  [result.mutableDetailsList addObjectsFromArray:values];
  return self;
}
- (MBook_Builder*) clearDetailsList {
  result.mutableDetailsList = nil;
  return self;
}
- (MBook_Builder*) addDetails:(MBookDetail*) value {
  if (result.mutableDetailsList == nil) {
    result.mutableDetailsList = [NSMutableArray array];
  }
  [result.mutableDetailsList addObject:value];
  return self;
}
@end

@interface MBookDetail ()
@property (retain) NSString* num;
@property (retain) NSString* code;
@property (retain) NSString* address;
@property (retain) NSString* state;
@end

@implementation MBookDetail

- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) value {
  hasNum_ = !!value;
}
@synthesize num;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) value {
  hasState_ = !!value;
}
@synthesize state;
- (void) dealloc {
  self.num = nil;
  self.code = nil;
  self.address = nil;
  self.state = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.num = @"";
    self.code = @"";
    self.address = @"";
    self.state = @"";
  }
  return self;
}
static MBookDetail* defaultMBookDetailInstance = nil;
+ (void) initialize {
  if (self == [MBookDetail class]) {
    defaultMBookDetailInstance = [[MBookDetail alloc] init];
  }
}
+ (MBookDetail*) defaultInstance {
  return defaultMBookDetailInstance;
}
- (MBookDetail*) defaultInstance {
  return defaultMBookDetailInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNum) {
    [output writeString:1 value:self.num];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  if (self.hasAddress) {
    [output writeString:3 value:self.address];
  }
  if (self.hasState) {
    [output writeString:4 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNum) {
    size += computeStringSize(1, self.num);
  }
  if (self.hasCode) {
    size += computeStringSize(2, self.code);
  }
  if (self.hasAddress) {
    size += computeStringSize(3, self.address);
  }
  if (self.hasState) {
    size += computeStringSize(4, self.state);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MBookDetail*) parseFromData:(NSData*) data {
  return (MBookDetail*)[[[MBookDetail builder] mergeFromData:data] build];
}
+ (MBookDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBookDetail*)[[[MBookDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MBookDetail*) parseFromInputStream:(NSInputStream*) input {
  return (MBookDetail*)[[[MBookDetail builder] mergeFromInputStream:input] build];
}
+ (MBookDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBookDetail*)[[[MBookDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBookDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MBookDetail*)[[[MBookDetail builder] mergeFromCodedInputStream:input] build];
}
+ (MBookDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MBookDetail*)[[[MBookDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MBookDetail_Builder*) builder {
  return [[[MBookDetail_Builder alloc] init] autorelease];
}
+ (MBookDetail_Builder*) builderWithPrototype:(MBookDetail*) prototype {
  return [[MBookDetail builder] mergeFrom:prototype];
}
- (MBookDetail_Builder*) builder {
  return [MBookDetail builder];
}
@end

@interface MBookDetail_Builder()
@property (retain) MBookDetail* result;
@end

@implementation MBookDetail_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MBookDetail alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MBookDetail_Builder*) clear {
  self.result = [[[MBookDetail alloc] init] autorelease];
  return self;
}
- (MBookDetail_Builder*) clone {
  return [MBookDetail builderWithPrototype:result];
}
- (MBookDetail*) defaultInstance {
  return [MBookDetail defaultInstance];
}
- (MBookDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MBookDetail*) buildPartial {
  MBookDetail* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MBookDetail_Builder*) mergeFrom:(MBookDetail*) other {
  if (other == [MBookDetail defaultInstance]) {
    return self;
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MBookDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MBookDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNum:[input readString]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
      case 26: {
        [self setAddress:[input readString]];
        break;
      }
      case 34: {
        [self setState:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasNum {
  return result.hasNum;
}
- (NSString*) num {
  return result.num;
}
- (MBookDetail_Builder*) setNum:(NSString*) value {
  result.hasNum = YES;
  result.num = value;
  return self;
}
- (MBookDetail_Builder*) clearNum {
  result.hasNum = NO;
  result.num = @"";
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (MBookDetail_Builder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (MBookDetail_Builder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSString*) address {
  return result.address;
}
- (MBookDetail_Builder*) setAddress:(NSString*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (MBookDetail_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = @"";
  return self;
}
- (BOOL) hasState {
  return result.hasState;
}
- (NSString*) state {
  return result.state;
}
- (MBookDetail_Builder*) setState:(NSString*) value {
  result.hasState = YES;
  result.state = value;
  return self;
}
- (MBookDetail_Builder*) clearState {
  result.hasState = NO;
  result.state = @"";
  return self;
}
@end

